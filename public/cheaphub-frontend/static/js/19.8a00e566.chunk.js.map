{"version":3,"sources":["assets/images/tabs/analytics-black.svg","assets/images/tabs/analytics-white.svg","views/charts/analytics/SummeryBarChart.js","views/charts/analytics/MachineAvgChart.js","views/charts/analytics/IntervalSummeryChart.js","views/analytics/analytics-details/ProductionAnalytisis.js","views/analytics/analytics-details/OrderAnalysis.js","views/analytics/analytics-details/YarnAnalysis.js","views/analytics/AnalyticsTabs.js","views/analytics/PreviewAnalytics.js","views/analytics/index.js","services/apiServices.js","services/apiConfig.js","services/auth.js","services/style-resources.js","../node_modules/chart.js/auto/auto.esm.js","../../node_modules/@swc/helpers/src/_define_property.js","../../node_modules/@swc/helpers/src/_object_spread.js","../../node_modules/@swc/helpers/src/_object_without_properties.js","../../node_modules/@swc/helpers/src/_object_without_properties_loose.js","../../node_modules/@swc/helpers/src/_sliced_to_array.js","../../node_modules/@swc/helpers/src/_array_with_holes.js","../../node_modules/@swc/helpers/src/_iterable_to_array.js","../../node_modules/@swc/helpers/src/_non_iterable_rest.js","../../src/utils.ts","../../src/chart.tsx","../../src/typedCharts.tsx","services/order-resources.js","services/productionRejection-resources.js"],"names":["SummeryBarChart","primaryBar","secondaryBar","gridLineColor","dataList","labelColor","picker","onClose","onChangeDate","fetched","yAxis","Array","from","map","item","productionCount","y1Axis","rejectionCount","xAxis","componentType","options","responsive","maintainAspectRatio","scales","x","grid","display","ticks","color","title","text","y","min","borderColor","precision","count","Math","max","beginAtZero","grace","alignToPixels","type","y1","position","plugins","legend","align","labels","padding","usePointStyle","textAlign","fullSize","data","datasets","maxBarThickness","backgroundColor","borderRadius","categoryPercentage","yAxisID","label","className","tag","for","value","id","style","width","onChange","mode","showMonths","placeholder","length","height","emptyUI","MachineAvgChart","knittingDiameter","average","weight","animation","duration","offset","legendDistance","fill","tension","pointRadius","pointHoverRadius","pointStyle","pointHoverBorderWidth","pointBorderColor","pointHoverBackgroundColor","IntervalSummeryChart","activeView","onDailyClick","onMonthlyClick","onYearlyClick","onCloseClick","onClosePicker","onChangeDateRange","dateFormat","format","month","year","day","time","unit","tooltip","callbacks","context","Date","parsed","toLocaleString","stringToColour","subList","parsing","xAxisKey","yAxisKey","classnames","active","outline","onClick","size","moment","require","dateISOStringConvertor","date","selectStyleId","ProductionAnalysis","refComp","useRef","dispatch","useDispatch","useState","setActiveView","activeSubView","setActiveSubView","stylesList","setStylesList","selectedStyle","setSelectedStyle","setPicker","intervalPicker","setIntervalPicker","currentDateTime","setCurrentDateTime","allData","params","page","currentPage","total","store","setStore","productionGraphData","setProductionGraphData","storeIntervalSummery","setStoreIntervalSummery","intervalSummaryList","setIntervalSummaryList","intervalSummaryListForCsv","setIntervalSummaryListForCsv","storeMachineSummery","setStoreMachineSummery","machineSummaryList","setMachineSummary","isFetched1","setIsFetched1","isFetched2","setIsFetched2","isFetched3","setIsFetched3","isFetched4","setIsFetched4","isFetched5","setIsFetched5","isFetched6","setIsFetched6","getSummeryDate","dateRage","selectedId","body","styleId","fromDate","toDate","ProductionRejectionServices","then","res","success","content","totalPages","customToastMsg","message","status","toggleLoading","getSummeryDateForGraph","getIntervalSummeryList","dateRange","isEmpty","groupList","list","groups","reduce","group","push","groupArrays","Object","keys","sort","a","b","parse","getIntervalSummaryForGraph","console","log","component","production","roundNumber","rejection","getMachineSummaryList","machines","Number","getMachineSummaryForGraph","getDateRange","latestDate","e","olderDate","getAllStyles","StyleServices","styleNumber","useEffect","tableBodyItems","i","fontSize","tableBodyItems2","tableBodyItems3","handleSummarySelection","handlePagination","selected","customStyles","container","provided","whiteSpace","lg","htmlFor","classNamePrefix","theme","selectThemeColors","find","c","styles","headers","key","target","productionPCS","getSummeryCsvData","asyncOnClick","getCustomDateTimeStamp","filename","selectedDates","dateStr","instance","setDate","borderless","borderTopLeftRadius","borderTopRightRadius","nextLabel","breakLabel","previousLabel","pageCount","activeClassName","breakClassName","pageClassName","breakLinkClassName","nextLinkClassName","pageLinkClassName","nextClassName","previousLinkClassName","previousClassName","onPageChange","forcePage","containerClassName","INTERVAL_SUMMARY_TYPES","defaultDate","ref","current","flatpickr","clear","getMachineAverageCsvData","prev","OrderAnalysis","poNumber","setPoNumber","setStyleNumber","isFetched","setIsFetched","csvDataList","setCsvDataList","getOrderAnalysis","getAllCsvData","productionWeight","rejectionWeight","rejectionPercentage","searchOrderAnalysis","searchValidation","getAllSearchedCsvData","onSearch","getTime","setTimeout","autoComplete","data2","YarnAnalysis","ordersList","setOrdersList","selectedOrder","setSelectedOrder","styleList","setStyleList","setProductionWeight","setRejectionWeight","setRejectionPercentage","totalConsumption","setTotalConsumption","setSelectedPONum","actualWeightCalculation","ratio","getYarnAnalysisList","orderId","productionRejectionServices","getCsvDataList","order","supplier","article","twist","actualWeight","estimatedWeight","getYarnAnalysisDetails","getStylesComponents","poNum","stylesService","undefined","getAllOrders","OrderServices","handleStyleSelection","handleOrderSelection","bordered","rowSpan","colSpan","paddingTop","AnalyticsTab","toggleTab","pills","Link","to","src","img1White","img1","alt","activeTab","tabId","PreviewStyles","setActive","lastParam","window","location","href","split","pop","tab","AnalyticsView","PreviewAnalytics","conf","serverUrl","process","basePath","redirect","renewTokenHandler","apiObject","obj","refresh_token","localStorage","getItem","constants","REFRESH_TOKEN","grant_type","authService","qs","stringify","response","access_token","Cookies","set","ACCESS_TOKEN","setItem","callApi","result","commonFunc","reload","method","toLowerCase","urlencoded","multipart","authentication","Authorization","isBasicAuth","url","apiConfig","endpoint","axios","code","catch","error","clearLocalStorage","renewToken","token","state","ApiService","authUser","userCredentials","changeUserPassword","getStyleById","getComponentsByStyleId","getAllStyleComponents","getDiameterConfirmationByStyleId","saveDiameterConfirmation","updateDiameterConfirmation","isCheckEditPermission","getConsumptionConfirmationByStyleId","saveConsumptionConfirmation","saveStyleComponent","updateStyleComponent","updateConsumptionConfirmation","getSizesByStyleId","removeConsumptionConfirmation","getStylesByOrderId","getStyleDetailsById","Chart","register","registerables","_defineProperty","defineProperty","enumerable","configurable","writable","_objectSpread","source","ownKeys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","forEach","arguments","_objectWithoutProperties","excluded","sourceKeys","indexOf","objectWithoutPropertiesLoose","sourceSymbolKeys","prototype","propertyIsEnumerable","call","_slicedToArray","arr","isArray","arrayWithHoles","iter","Symbol","iterator","toString","iterableToArrayLimit","TypeError","nonIterableRest","reforwardRef","setLabels","currentData","nextLabels","setDatasets","nextDatasets","nextDataset","currentDataset","dataset","assign","cloneData","nextData","noopData","ChartComponent","redraw","dataProp","getDatasetAtEvent","getElementAtEvent","getElementsAtEvent","fallbackContent","onClickProp","props","canvasRef","chartRef","computedData","setComputedData","renderChart","ChartJS","destroyChart","destroy","chart","nextOptions","config","update","canvas","role","event","getElementsAtEventForMode","nativeEvent","intersect","forwardRef","createTypedChart","Line","Bar","Radar","Doughnut","PolarArea","Bubble","Scatter","getOrders","getOrderById","getOrderInfosByPONumber","createOrderInfos","updateOrderInfos","getAllEstimatedConsumptions","getOrderItems","getAllEstimatedYarnRequirements","getAllEstimatedYarnRequirementsForCsv","searchEstimatedYarnRequirements","searchEstimatedYarnRequirementsForCsv","saveNewRecord","updateRecord","getSummeryList","getSummeryGraph","getIntervalSummery","getIntervalSummeryGraph","getOrderSummary","getOrderSummaryForCsv","getMachineSummary","getYarnAnalysisListForCsv","searchOrderAnalysisForCsv","searchProductionRejections","searchProductionRejectionsForCsv"],"mappings":"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","file":"static/js/19.8a00e566.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/analytics-black.84630397.svg\";","export default __webpack_public_path__ + \"static/media/analytics-white.ab754d99.svg\";","// ** Third Party Components\r\nimport {Bar} from 'react-chartjs-2'\r\nimport Flatpickr from 'react-flatpickr'\r\nimport {Calendar} from 'react-feather'\r\n\r\n// ** Reactstrap Imports\r\nimport {Card, CardHeader, CardTitle, CardBody, Alert, Label} from 'reactstrap'\r\nimport React from \"react\"\r\nimport {emptyUI} from \"../../../utility/Utils\"\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nconst SummeryBarChart = ({primaryBar, secondaryBar, gridLineColor, dataList, labelColor, picker, onClose, onChangeDate, fetched}) => {\r\n\r\n    const yAxis = Array.from(dataList.map(item => item.productionCount))\r\n    const y1Axis = Array.from(dataList.map(item => item.rejectionCount))\r\n    const xAxis = Array.from(dataList.map(item => item.componentType))\r\n\r\n    // ** Chart Options\r\n    const options = {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        // animation: {duration: 1000},\r\n        scales: {\r\n            x: {\r\n                grid: {display: false},\r\n                ticks: {color: labelColor},\r\n                title: {\r\n                    display: true,\r\n                    text: 'Components'\r\n                }\r\n            },\r\n            y: {\r\n                min: 0,\r\n                // max:Math.max(...dataList.map(e => e.productionCount)),\r\n                grid: {\r\n                    color: gridLineColor,\r\n                    borderColor: primaryBar\r\n                },\r\n                ticks: {\r\n                    // stepSize: 20,\r\n                    color: labelColor,\r\n                    precision: 0,\r\n                    count: Math.max(yAxis) > 0 ? 10 : null\r\n                },\r\n                title: {\r\n                    display: true,\r\n                    text: 'Production (PCS)'\r\n                },\r\n                beginAtZero: true,\r\n                grace: '5%',\r\n                alignToPixels: true,\r\n                type: 'linear'\r\n            },\r\n            y1: {\r\n                min: 0,\r\n                // max:Math.max(...dataList.map(e => e.rejectionCount)),\r\n                grid: {\r\n                    color: gridLineColor,\r\n                    borderColor: secondaryBar\r\n                },\r\n                ticks: {\r\n                    // stepSize: 20,\r\n                    color: labelColor,\r\n                    precision: 0,\r\n                    count: Math.max(y1Axis) > 0 ? 10 : null\r\n                },\r\n                title: {\r\n                    display: true,\r\n                    text: 'Rejection (Kg)'\r\n                },\r\n                position: 'right',\r\n                beginAtZero: true,\r\n                grace: '5%',\r\n                alignToPixels: true,\r\n                type: 'linear'\r\n            }\r\n        },\r\n        plugins: {\r\n            legend: {\r\n                align: 'center',\r\n                position: 'top',\r\n                labels: {\r\n                    // boxWidth: 10,\r\n                    // marginBottom: 25,\r\n                    padding: 20,\r\n                    color: labelColor,\r\n                    usePointStyle: true,\r\n                    textAlign: 'right'\r\n                },\r\n                fullSize: true,\r\n                padding: 100\r\n            }\r\n        }\r\n    }\r\n\r\n    const labels = xAxis\r\n\r\n    // ** Chart data\r\n    const data = {\r\n        labels,\r\n        datasets: [\r\n            {\r\n                maxBarThickness: 40,\r\n                borderColor: 'transparent',\r\n                data: yAxis,\r\n                backgroundColor: primaryBar,\r\n                borderRadius: 5,\r\n                categoryPercentage: 0.5,\r\n                yAxisID: 'y',\r\n                label: 'Production PCS'\r\n            },\r\n            {\r\n                borderColor: 'transparent',\r\n                data: y1Axis,\r\n                maxBarThickness: 40,\r\n                backgroundColor: secondaryBar,\r\n                borderRadius: 5,\r\n                categoryPercentage: 0.5,\r\n                yAxisID: 'y1',\r\n                label: 'Rejection Weight'\r\n            }\r\n        ]\r\n    }\r\n\r\n    return (\r\n        <Card className='invoice-preview-card w-100'>\r\n            <CardHeader className='d-flex justify-content-start'>\r\n                <CardTitle tag='h4'>Summery</CardTitle>\r\n            </CardHeader>\r\n            <CardBody>\r\n                <div className='d-flex align-items-center mb-2 mt-1'>\r\n                    <Label className='form-label' for='default-picker'>\r\n                        Date Range\r\n                    </Label>\r\n                    <Flatpickr\r\n                        value={picker}\r\n                        id='range-picker'\r\n                        className='form-control ms-1'\r\n                        style={{width: 210}}\r\n                        onChange={onChangeDate}\r\n                        onClose={onClose}\r\n                        options={{\r\n                            mode: 'range',\r\n                            showMonths: 2\r\n                            // defaultDate:[new Date(picker[0]), new Date(picker[1])]\r\n                        }}\r\n                        placeholder={\"Select Date Range\"}\r\n                    />\r\n                </div>\r\n                {dataList.length !== 0 ? (\r\n                    <div style={{height: '400px'}}>\r\n                        <Bar data={data} options={options} height={400}/>\r\n                    </div>\r\n                ) : emptyUI(fetched)}\r\n\r\n            </CardBody>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default SummeryBarChart\r\n","// ** Third Party Components\r\nimport {Line} from 'react-chartjs-2'\r\nimport Flatpickr from 'react-flatpickr'\r\nimport {Calendar} from 'react-feather'\r\n\r\n// ** Reactstrap Imports\r\nimport {Card, CardHeader, CardTitle, CardBody, Alert} from 'reactstrap'\r\nimport React from \"react\"\r\nimport {emptyUI} from \"../../../utility/Utils\"\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nconst MachineAvgChart = ({primaryBar, secondaryBar, gridLineColor, labelColor, dataList, fetched}) => {\r\n\r\n    const xAxis = Array.from(dataList.map(item => item.knittingDiameter))\r\n    const yAxis = Array.from(dataList.map(item => item.average))\r\n    const y1Axis = Array.from(dataList.map(item => item.weight))\r\n\r\n    // ** Chart Options\r\n    const options = {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        animation: {duration: 1000},\r\n        scales: {\r\n            x: {\r\n                grid: {display: false},\r\n                ticks: {color: labelColor},\r\n                offset: true,\r\n                title: {\r\n                    display: true,\r\n                    text: 'Knitting Diameter'\r\n                }\r\n            },\r\n            y: {\r\n                min: 0,\r\n                grid: {\r\n                    color: gridLineColor,\r\n                    borderColor: primaryBar\r\n                },\r\n                ticks: {\r\n                    precision: 0,\r\n                    count: Math.max(yAxis) > 0 ? 10 : null,\r\n                    color: labelColor\r\n                },\r\n                title: {\r\n                    display: true,\r\n                    text: 'Total Machine Average'\r\n                },\r\n                beginAtZero: true,\r\n                grace: '5%',\r\n                alignToPixels: true,\r\n                type: 'linear'\r\n            },\r\n            y1: {\r\n                min: 0,\r\n                grid: {\r\n                    color: gridLineColor,\r\n                    borderColor: secondaryBar\r\n                },\r\n                ticks: {\r\n                    precision: 0,\r\n                    count: Math.max(y1Axis) > 0 ? 10 : null,\r\n                    color: labelColor\r\n                },\r\n                title: {\r\n                    display: true,\r\n                    text: 'Total Production Weight (kg)'\r\n                },\r\n                position: 'right',\r\n                beginAtZero: true,\r\n                grace: '5%',\r\n                alignToPixels: true,\r\n                type: 'linear'\r\n            }\r\n        },\r\n        plugins: {\r\n            legend: {\r\n                display: true,\r\n                align: 'center',\r\n                labels: {\r\n                    // boxWidth: 10,\r\n                    // paddingLeft: 1000,\r\n                    color: labelColor,\r\n                    usePointStyle: true\r\n                }\r\n            },\r\n            legendDistance: {\r\n                padding: 50\r\n            }\r\n        }\r\n    }\r\n\r\n    const labels = xAxis\r\n\r\n    // ** Chart data\r\n    const data = {\r\n        labels,\r\n        datasets: [\r\n            {\r\n                borderColor: primaryBar,\r\n                data: yAxis,\r\n                fill: false,\r\n                tension: 0.5,\r\n                label: 'Total Machine Average',\r\n                pointRadius: 3,\r\n                pointHoverRadius: 5,\r\n                pointStyle: 'circle',\r\n                pointHoverBorderWidth: 5,\r\n                pointBorderColor: 'transparent',\r\n                backgroundColor: primaryBar,\r\n                yAxisID: 'y',\r\n                pointHoverBackgroundColor: primaryBar\r\n            },\r\n            {\r\n                borderColor: secondaryBar,\r\n                data: y1Axis,\r\n                fill: false,\r\n                tension: 0.5,\r\n                label: 'Total Production Weight',\r\n                pointRadius: 3,\r\n                pointHoverRadius: 5,\r\n                pointStyle: 'circle',\r\n                pointHoverBorderWidth: 5,\r\n                pointBorderColor: 'transparent',\r\n                backgroundColor: secondaryBar,\r\n                yAxisID: 'y1',\r\n                pointHoverBackgroundColor: secondaryBar\r\n            }\r\n        ]\r\n    }\r\n\r\n    return (\r\n        <Card className='invoice-preview-card w-100'>\r\n            <CardHeader className='d-flex justify-content-start'>\r\n                <CardTitle tag='h4'>Machine Average</CardTitle>\r\n            </CardHeader>\r\n            <CardBody>\r\n                {dataList.length !== 0 ? (\r\n                    <Line data={data} options={options} height={400}/>\r\n                ) : emptyUI(fetched)}\r\n\r\n            </CardBody>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default MachineAvgChart\r\n","// ** Third Party Components\r\nimport {Line} from 'react-chartjs-2'\r\nimport Flatpickr from 'react-flatpickr'\r\nimport {X} from 'react-feather'\r\n\r\n// ** Reactstrap Imports\r\nimport {Button, ButtonGroup, Card, CardBody, CardHeader, CardTitle, Label} from 'reactstrap'\r\nimport React from \"react\"\r\nimport classnames from \"classnames\"\r\nimport {emptyUI, stringToColour} from \"../../../utility/Utils\"\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nconst IntervalSummeryChart = ({primaryBar, secondaryBar, gridLineColor, labelColor, activeView, onDailyClick, onMonthlyClick, onYearlyClick, dataList, picker, onCloseClick, onClosePicker, onChangeDateRange, fetched}) => {\r\n\r\n    const dateFormat = (type) => {\r\n        switch (type) {\r\n            case 'DAILY':\r\n                return {\r\n                    title: 'day',\r\n                    format: {\r\n                        month: 'short',\r\n                        year: 'numeric',\r\n                        day: 'numeric'\r\n                    }\r\n                }\r\n            case 'MONTHLY':\r\n                return {\r\n                    title: 'month',\r\n                    format: {\r\n                        month: 'short',\r\n                        year: 'numeric'\r\n                    }\r\n                }\r\n            case 'YEARLY':\r\n                return {\r\n                    title: 'year',\r\n                    format: {\r\n                        year: 'numeric'\r\n                    }\r\n                }\r\n            default:\r\n                return {}\r\n        }\r\n    }\r\n\r\n    // ** Chart Options\r\n    const options = {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        animation: {duration: 1000},\r\n        scales: {\r\n            x: {\r\n                type: 'time',\r\n                time: {\r\n                    unit: dateFormat(activeView).title\r\n                },\r\n                title: {\r\n                    display: true,\r\n                    text: 'Date'\r\n                },\r\n                grid: {display: false},\r\n                ticks: {color: labelColor},\r\n                offset: true\r\n            },\r\n            y: {\r\n                min: 0,\r\n                grid: {\r\n                    color: gridLineColor,\r\n                    borderColor: '#DBDBDB'\r\n                },\r\n                ticks: {\r\n                    precision: 0,\r\n                    count: 10,\r\n                    color: labelColor\r\n                },\r\n                title: {\r\n                    display: true,\r\n                    text: 'Production (PCS)'\r\n                }\r\n            }\r\n        },\r\n        plugins: {\r\n            legend: {\r\n                align: 'center',\r\n                position: 'top',\r\n                labels: {\r\n                    // boxWidth: 10,\r\n                    // marginBottom: 25,\r\n                    padding: 20,\r\n                    color: labelColor,\r\n                    usePointStyle: true,\r\n                    textAlign: 'right'\r\n                },\r\n                fullSize: true,\r\n                padding: 100\r\n            },\r\n            tooltip: {\r\n                callbacks: {\r\n                    title: context => {\r\n                        const d = new Date(context[0].parsed.x)\r\n                        return d.toLocaleString([], dateFormat(activeView).format)\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    // const labels = [\"Jan 2, 20\", \"Feb 3, 20\", \"Mar 4, 20\", \"Apr 5, 20\", \"May 6, 20\", \"Jun 9, 20\", \"Nov 10, 20\", \"Dec 11, 20\"]\r\n\r\n    // ** Chart data\r\n    const data = {\r\n        datasets: dataList.map(item => (\r\n            {\r\n                borderColor: stringToColour(item.componentType),\r\n                data: item.subList,\r\n                fill: false,\r\n                tension: 0.5,\r\n                pointRadius: item.subList.length === 1 ? 3 : 0,\r\n                pointHoverRadius: 5,\r\n                pointStyle: 'circle',\r\n                label: item.componentType,\r\n                pointHoverBorderWidth: 5,\r\n                pointBorderColor: 'transparent',\r\n                backgroundColor: stringToColour(item.componentType),\r\n                pointHoverBackgroundColor: stringToColour(item.componentType),\r\n                parsing: {\r\n                    xAxisKey: 'date',\r\n                    yAxisKey: 'productionCount'\r\n                }\r\n            }\r\n        ))\r\n    }\r\n\r\n    return (\r\n        <Card className='invoice-preview-card w-100'>\r\n            <CardHeader className='d-flex justify-content-between w-100'>\r\n                <CardTitle tag='h4'>Interval Summery</CardTitle>\r\n                <ButtonGroup>\r\n                    <Button\r\n                        tag='label'\r\n                        className={classnames('btn-icon view-btn grid-view-btn', {\r\n                            active: activeView === 'DAILY'\r\n                        })}\r\n                        color='primary'\r\n                        outline={activeView !== 'DAILY'}\r\n                        onClick={onDailyClick}\r\n                    >\r\n                        Daily\r\n                    </Button>\r\n                    <Button\r\n                        tag='label'\r\n                        className={classnames('btn-icon view-btn list-view-btn', {\r\n                            active: activeView === 'MONTHLY'\r\n                        })}\r\n                        color='primary'\r\n                        outline={activeView !== 'MONTHLY'}\r\n                        onClick={onMonthlyClick}\r\n                    >\r\n                        Monthly\r\n                    </Button>\r\n                    <Button\r\n                        tag='label'\r\n                        className={classnames('btn-icon view-btn list-view-btn', {\r\n                            active: activeView === 'YEARLY'\r\n                        })}\r\n                        color='primary'\r\n                        outline={activeView !== 'YEARLY'}\r\n                        onClick={onYearlyClick}\r\n                    >\r\n                        Yearly\r\n                    </Button>\r\n                </ButtonGroup>\r\n            </CardHeader>\r\n\r\n            <div className='d-flex align-items-center mt-1 ms-2 w-75'>\r\n                <Label className='form-label' for='default-picker'>\r\n                    Date Range\r\n                </Label>\r\n                <Flatpickr\r\n                    value={picker}\r\n                    id='range-picker'\r\n                    className='form-control ms-1'\r\n                    onChange={onChangeDateRange}\r\n                    placeholder={\"Select Date Range\"}\r\n                    onClose={onClosePicker}\r\n                    options={{\r\n                        mode: 'range',\r\n                        showMonths: 2\r\n                        // defaultDate:[new Date(picker[0]), new Date(picker[1])]\r\n                    }}\r\n                />\r\n                {picker.length !== 0 && (\r\n                    <div\r\n                        className='ms-2'>\r\n                        <X size={18}\r\n                           className='cursor-pointer'\r\n                           onClick={onCloseClick}\r\n                        />\r\n                    </div>\r\n                )}\r\n\r\n            </div>\r\n\r\n            <CardBody>\r\n                {dataList.length !== 0 ? (\r\n                    <div style={{height: '400px'}}>\r\n                        <Line data={data} options={options} height={400}/>\r\n                    </div>\r\n                ) : emptyUI(fetched)}\r\n\r\n            </CardBody>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default IntervalSummeryChart\r\n","import React, {useEffect, useRef, useState} from \"react\"\r\nimport {Alert, Button, ButtonGroup, Card, CardBody, Col, Input, Label, Row, Table} from \"reactstrap\"\r\nimport {INTERVAL_SUMMARY_TYPES} from \"../../../const/constant\"\r\nimport ReactPaginate from \"react-paginate\"\r\nimport SummeryBarChart from \"../../charts/analytics/SummeryBarChart\"\r\nimport MachineAvgChart from \"../../charts/analytics/MachineAvgChart\"\r\nimport IntervalSummeryChart from \"../../charts/analytics/IntervalSummeryChart\"\r\nimport classnames from \"classnames\"\r\nimport * as StyleServices from '../../../services/style-resources'\r\nimport * as ProductionRejectionServices from '../../../services/productionRejection-resources'\r\nimport Flatpickr from \"react-flatpickr\"\r\nimport {customToastMsg, emptyUI, getCustomDateTimeStamp, isEmpty, roundNumber} from \"../../../utility/Utils\"\r\nimport {useDispatch} from \"react-redux\"\r\nimport {toggleLoading} from '@store/loading'\r\nimport Select from \"react-select\"\r\nimport {selectThemeColors} from '@utils'\r\nimport {X} from \"react-feather\"\r\nimport {CSVLink} from \"react-csv\"\r\n\r\nconst moment = require('moment')\r\n\r\nfunction dateISOStringConvertor(date) {\r\n    return moment(date).format('YYYY-MM-DD')\r\n}\r\n\r\nlet selectStyleId = ''\r\n\r\nconst ProductionAnalysis = () => {\r\n    const refComp = useRef(null)\r\n\r\n    const dispatch = useDispatch()\r\n    // eslint-disable-next-line no-unused-vars\r\n    const [totalPages, setTotalPages] = useState(0)\r\n    const [activeView, setActiveView] = useState('table')\r\n    const [activeSubView, setActiveSubView] = useState('DAILY')\r\n    const [stylesList, setStylesList] = useState([])\r\n    // eslint-disable-next-line no-unused-vars\r\n    const [selectedStyle, setSelectedStyle] = useState()\r\n    const [picker, setPicker] = useState([])\r\n    const [intervalPicker, setIntervalPicker] = useState([])\r\n    // eslint-disable-next-line no-unused-vars\r\n    const [currentPage, setCurrentPage] = useState(0)\r\n    const [currentDateTime, setCurrentDateTime] = useState('')\r\n\r\n    // eslint-disable-next-line no-unused-vars\r\n    const [store, setStore] = useState({\r\n        allData: [],\r\n        data: [],\r\n        params: {\r\n            page: 0,\r\n            currentPage: 0\r\n        },\r\n        total: 0\r\n    })\r\n    const [productionGraphData, setProductionGraphData] = useState([])\r\n\r\n    // eslint-disable-next-line no-unused-vars\r\n    const [storeIntervalSummery, setStoreIntervalSummery] = useState({\r\n        allData: [],\r\n        data: [],\r\n        params: {\r\n            page: 0,\r\n            currentPage: 0\r\n        },\r\n        total: 0\r\n    })\r\n    // eslint-disable-next-line no-unused-vars\r\n    const [intervalSummaryList, setIntervalSummaryList] = useState([])\r\n    const [intervalSummaryListForCsv, setIntervalSummaryListForCsv] = useState([])\r\n\r\n    const [storeMachineSummery, setStoreMachineSummery] = useState({\r\n        allData: [],\r\n        data: [],\r\n        params: {\r\n            page: 0,\r\n            currentPage: 0\r\n        },\r\n        total: 0\r\n    })\r\n\r\n    // eslint-disable-next-line no-unused-vars\r\n    const [machineSummaryList, setMachineSummary] = useState([])\r\n    const [isFetched1, setIsFetched1] = useState(false)\r\n    const [isFetched2, setIsFetched2] = useState(false)\r\n    const [isFetched3, setIsFetched3] = useState(false)\r\n    const [isFetched4, setIsFetched4] = useState(false)\r\n    const [isFetched5, setIsFetched5] = useState(false)\r\n    const [isFetched6, setIsFetched6] = useState(false)\r\n\r\n\r\n    const getSummeryDate = (dateRage, selectedId, params) => {\r\n        const body = {\r\n            styleId: selectedId,\r\n            fromDate: dateISOStringConvertor(dateRage[0]),\r\n            toDate: dateISOStringConvertor(dateRage[1])\r\n        }\r\n        ProductionRejectionServices.getSummeryList(params.page, body)\r\n            .then(res => {\r\n                if (res.success) {\r\n                    setStore({allData: res.data.content, data: res.data.content, params, total: res.data.totalPages})\r\n                } else {\r\n                    customToastMsg(res.message, res.status)\r\n                    setStore({\r\n                        allData: [],\r\n                        data: [],\r\n                        params: {\r\n                            page: 0,\r\n                            currentPage: 0\r\n                        },\r\n                        total: 0\r\n                    })\r\n                }\r\n                dispatch(toggleLoading())\r\n                setIsFetched1(true)\r\n            })\r\n    }\r\n\r\n    const getSummeryDateForGraph = (dateRage, selectedId) => {\r\n        const body = {\r\n            styleId: selectedId,\r\n            fromDate: dateISOStringConvertor(dateRage[0]),\r\n            toDate: dateISOStringConvertor(dateRage[1])\r\n        }\r\n        ProductionRejectionServices.getSummeryGraph(body)\r\n            .then(res => {\r\n                if (res.success) {\r\n                    setProductionGraphData(res.data)\r\n                } else {\r\n                    setProductionGraphData([])\r\n                    customToastMsg(res.message, res.status)\r\n                }\r\n                setIsFetched4(true)\r\n            })\r\n    }\r\n\r\n\r\n    const getIntervalSummeryList = (selectedId, type, params, dateRange) => {\r\n        const body = {\r\n            styleId: selectedId,\r\n            type,\r\n            fromDate: !isEmpty(dateRange[0]) ? dateISOStringConvertor(dateRange[0]) : 0,\r\n            toDate: !isEmpty(dateRange[1]) ? dateISOStringConvertor(dateRange[1]) : 0\r\n        }\r\n\r\n        ProductionRejectionServices.getIntervalSummery(params.page, body)\r\n            .then(res => {\r\n                if (res.success) {\r\n                    setStoreIntervalSummery({\r\n                        allData: res.data.content,\r\n                        data: res.data.content,\r\n                        params,\r\n                        total: res.data.totalPages\r\n                    })\r\n                } else {\r\n                    customToastMsg(res.message, res.status)\r\n                    setStoreIntervalSummery({\r\n                        allData: [],\r\n                        data: [],\r\n                        params: {\r\n                            page: 0,\r\n                            currentPage: 0\r\n                        },\r\n                        total: 0\r\n                    })\r\n                }\r\n                dispatch(toggleLoading())\r\n                setIsFetched2(true)\r\n            })\r\n    }\r\n\r\n    // eslint-disable-next-line no-unused-vars\r\n    const groupList = (list) => {\r\n        // this gives an object with dates as keys\r\n        const groups = list.reduce((group, item) => {\r\n            const componentType = item.componentType\r\n            if (!group[componentType]) {\r\n                group[componentType] = []\r\n            }\r\n            group[componentType].push(item)\r\n            return group\r\n        }, {})\r\n\r\n        // Edit: to add it in the array format instead\r\n        const groupArrays = Object.keys(groups).map((componentType) => {\r\n            return {\r\n                componentType,\r\n                subList: groups[componentType].sort((a, b) => Date.parse(a.date) - Date.parse(b.date))\r\n            }\r\n        })\r\n        setIntervalSummaryList(groupArrays)\r\n    }\r\n\r\n    const getIntervalSummaryForGraph = (selectedId, type, dateRange) => {\r\n        const body = {\r\n            styleId: selectedId,\r\n            type,\r\n            fromDate: !isEmpty(dateRange[0]) ? dateISOStringConvertor(dateRange[0]) : 0,\r\n            toDate: !isEmpty(dateRange[1]) ? dateISOStringConvertor(dateRange[1]) : 0\r\n        }\r\n\r\n        ProductionRejectionServices.getIntervalSummeryGraph(body)\r\n            .then(async res => {\r\n                if (res.success) {\r\n                    groupList(res.data)\r\n                    const list = []\r\n                    console.log(type)\r\n                    res.data.map(item => {\r\n                        list.push({\r\n                            date: moment(item.date).format(type === 'DAILY' ? 'YYYY-MM-DD' : type === 'MONTHLY' ? 'YYYY-MM' : 'YYYY'),\r\n                            component: item.componentType,\r\n                            production: roundNumber(item.productionCount),\r\n                            rejection: roundNumber(item.rejectionCount)\r\n                        })\r\n                    })\r\n                    setIntervalSummaryListForCsv(list)\r\n                } else {\r\n                    setIntervalSummaryList([])\r\n                    setIntervalSummaryListForCsv([])\r\n                    customToastMsg(res.message, res.status)\r\n                }\r\n                dispatch(toggleLoading())\r\n                setIsFetched5(true)\r\n            })\r\n    }\r\n\r\n    const getMachineSummaryList = (styleId, params) => {\r\n        ProductionRejectionServices.getMachineSummary(styleId, params.page)\r\n            .then(res => {\r\n                if (res.success) {\r\n                    const list = []\r\n                    res.data.content.map(item => {\r\n                        list.push({\r\n                            knittingDiameter: item.knittingDiameter !== null ? item.knittingDiameter : 0,\r\n                            machines: item.machines,\r\n                            weight: roundNumber(item.weight),\r\n                            average: roundNumber(Number(item.weight) / Number(item.machines))\r\n                        })\r\n                    })\r\n                    setStoreMachineSummery({\r\n                        allData: list,\r\n                        data: list,\r\n                        params,\r\n                        total: res.data.totalPages\r\n                    })\r\n                } else {\r\n                    customToastMsg(res.message, res.status)\r\n                    setStoreMachineSummery({\r\n                        allData: [],\r\n                        data: [],\r\n                        params: {\r\n                            page: 0,\r\n                            currentPage: 0\r\n                        },\r\n                        total: 0\r\n                    })\r\n                }\r\n                setIsFetched3(true)\r\n            })\r\n    }\r\n\r\n    const getMachineSummaryForGraph = (styleId) => {\r\n        ProductionRejectionServices.getMachineSummaryForGraph(styleId)\r\n            .then(res => {\r\n                if (res.success) {\r\n                    const list = []\r\n                    res.data.content.map(item => {\r\n                        list.push({\r\n                            knittingDiameter: item.knittingDiameter !== null ? item.knittingDiameter : 0,\r\n                            machines: item.machines,\r\n                            weight: roundNumber(item.weight),\r\n                            average: roundNumber(Number(item.weight) / Number(item.machines))\r\n                        })\r\n                    })\r\n                    setMachineSummary(list)\r\n                } else {\r\n                    setMachineSummary([])\r\n                    customToastMsg(res.message, res.status)\r\n                }\r\n                setIsFetched6(true)\r\n            })\r\n\r\n    }\r\n\r\n    const getDateRange = async (selectedId) => {\r\n        await ProductionRejectionServices.getDateRange()\r\n            .then(async res => {\r\n                if (res.success) {\r\n                    const latestDate = new Date(Math.max(...res.data.content.map(e => new Date(e.date))))\r\n                    const olderDate = new Date(Math.min(...res.data.content.map(e => new Date(e.date))))\r\n                    const dateRage = [olderDate, latestDate]\r\n                    setPicker(dateRage)\r\n                    getSummeryDate(dateRage, selectedId, {page: 0, currentPage: 0})\r\n                    getSummeryDateForGraph(dateRage, selectedId)\r\n                    getIntervalSummeryList(selectedId, activeSubView, {page: 0, currentPage: 0}, intervalPicker)\r\n                    getIntervalSummaryForGraph(selectedId, activeSubView, intervalPicker)\r\n                    getMachineSummaryList(selectedId, {page: 0, currentPage: 0})\r\n                    getMachineSummaryForGraph(selectedId)\r\n                } else {\r\n                    dispatch(toggleLoading())\r\n                    customToastMsg(res.data.title, res.status)\r\n                }\r\n\r\n            })\r\n    }\r\n\r\n    const getAllStyles = async () => {\r\n        dispatch(toggleLoading())\r\n        await StyleServices.getAllStyles()\r\n            .then(async res => {\r\n                if (res.success) {\r\n                    const list = []\r\n                    res.data.map(item => {\r\n                        list.push({\r\n                            label: item.styleNumber,\r\n                            value: item.id\r\n                        })\r\n                    })\r\n                    setStylesList(list)\r\n                    setSelectedStyle(list[0]?.value)\r\n                    selectStyleId = list[0]?.value\r\n                    await getDateRange(list[0]?.value)\r\n                } else {\r\n                    dispatch(toggleLoading())\r\n                    customToastMsg(res.data.title, res.status)\r\n                }\r\n            })\r\n    }\r\n\r\n    useEffect(async () => {\r\n        await getAllStyles()\r\n    }, [])\r\n\r\n    const tableBodyItems = store.data.map((item, i) => (\r\n        <tr key={i} style={{fontSize: 12}}>\r\n            <td>\r\n                <p className='text-center'>{item.componentType}</p>\r\n            </td>\r\n            <td>\r\n                <p className='text-center'>{item.productionCount}</p>\r\n            </td>\r\n            <td>\r\n                <p className='text-center'>{roundNumber(item.rejectionCount)}</p>\r\n            </td>\r\n        </tr>\r\n    ))\r\n\r\n    const tableBodyItems2 = storeIntervalSummery.data.map((item, i) => (\r\n        <tr key={i} style={{fontSize: 12}}>\r\n            <td>\r\n                <p className='text-center'>\r\n                    {moment(item.date).format(activeSubView === 'DAILY' ? 'YYYY-MM-DD' : activeSubView === 'MONTHLY' ? 'YYYY-MM' : 'YYYY')}\r\n                </p>\r\n            </td>\r\n            <td>\r\n                <p className='text-center'>{item.componentType}</p>\r\n            </td>\r\n            <td>\r\n                <p className='text-center'>{item.productionCount}</p>\r\n            </td>\r\n            <td>\r\n                <p className='text-center'>{roundNumber(item.rejectionCount)}</p>\r\n            </td>\r\n        </tr>\r\n    ))\r\n\r\n    const tableBodyItems3 = storeMachineSummery.data.map((item, i) => (\r\n        <tr key={i} style={{fontSize: 12}}>\r\n            <td>\r\n                <p className='text-center'>{item.knittingDiameter}</p>\r\n            </td>\r\n            <td>\r\n                <p className='text-center'>{item.machines}</p>\r\n            </td>\r\n            <td>\r\n                <p className='text-center'>{item.weight !== null ? roundNumber(item.weight) : null}</p>\r\n            </td>\r\n            <td>\r\n                <p className='text-center'>{item.average}</p>\r\n            </td>\r\n        </tr>\r\n    ))\r\n\r\n    const handleStyleSelection = (e) => {\r\n        setSelectedStyle(e.value)\r\n        selectStyleId = e.value\r\n        dispatch(toggleLoading())\r\n        getSummeryDate(picker, e.value, {page: 0, currentPage: 0})\r\n        getSummeryDateForGraph(picker, e.value)\r\n        getIntervalSummeryList(e.value, activeSubView, {page: 0, currentPage: 0}, intervalPicker)\r\n        getIntervalSummaryForGraph(e.value, activeSubView, intervalPicker)\r\n        getMachineSummaryList(e.value, {page: 0, currentPage: 0})\r\n        getMachineSummaryForGraph(e.value)\r\n    }\r\n\r\n    const handleSummarySelection = async (e) => {\r\n        await setActiveSubView(e.value)\r\n        dispatch(toggleLoading())\r\n        getIntervalSummeryList(selectedStyle, e.value, {page: 0, currentPage: 0}, intervalPicker)\r\n        getIntervalSummaryForGraph(selectedStyle, e.value, intervalPicker)\r\n    }\r\n\r\n    const handlePagination = (type, page) => {\r\n        dispatch(toggleLoading())\r\n        switch (type) {\r\n            case 'SUMMARY':\r\n                getSummeryDate(picker, selectedStyle, {\r\n                    page: page.selected,\r\n                    currentPage: page.selected + 1\r\n                })\r\n                break\r\n            case 'INTERVAL_SUMMARY':\r\n                getIntervalSummeryList(selectedStyle, activeSubView, {\r\n                    page: page.selected,\r\n                    currentPage: page.selected + 1\r\n                }, intervalPicker)\r\n                break\r\n            case 'MACHINE_SUMMARY':\r\n                getMachineSummaryList(selectedStyle, {\r\n                    page: page.selected,\r\n                    currentPage: page.selected + 1\r\n                })\r\n                break\r\n            default:\r\n                break\r\n        }\r\n    }\r\n\r\n    const customStyles = {\r\n        container: provided => ({\r\n            ...provided,\r\n            width: 150\r\n            // minWidth: \"100%\"\r\n        })\r\n    }\r\n\r\n    const getSummeryCsvData = (data) => {\r\n        const list = []\r\n        data.map(item => {\r\n            list.push({\r\n                component: item.componentType,\r\n                productionPCS: item.productionCount,\r\n                rejection: item.rejectionCount\r\n            })\r\n        })\r\n        return list\r\n    }\r\n\r\n    const getMachineAverageCsvData = (data) => {\r\n        const list = []\r\n        data.map(item => {\r\n            list.push({\r\n                knittingDiameter: item.knittingDiameter,\r\n                machines: item.machines,\r\n                weight: roundNumber(item.weight),\r\n                average: roundNumber(Number(item.weight) / Number(item.machines))\r\n            })\r\n        })\r\n        return list\r\n    }\r\n\r\n    return (\r\n        <div className='invoice-list-table-header w-100 py-2' style={{whiteSpace: 'nowrap'}}>\r\n            <Row>\r\n                <Col lg='12' className='d-flex align-items-center mb-1'>\r\n                    <div className='d-flex justify-content-between w-100'>\r\n                        <div className=\"d-flex align-items-center\">\r\n                            <label htmlFor='rows-per-page'>Style</label>\r\n                            <Select\r\n                                className='react-select ms-1'\r\n                                classNamePrefix='select'\r\n                                placeholder='Style'\r\n                                options={stylesList}\r\n                                theme={selectThemeColors}\r\n                                value={stylesList.find((c) => c.value === selectedStyle)}\r\n                                onChange={handleStyleSelection}\r\n                                styles={customStyles}\r\n                            />\r\n                        </div>\r\n\r\n                        <ButtonGroup>\r\n                            <Button\r\n                                tag='label'\r\n                                className={classnames('btn-icon view-btn grid-view-btn', {\r\n                                    active: activeView === 'table'\r\n                                })}\r\n                                color='primary'\r\n                                outline={activeView !== 'table'}\r\n                                onClick={() => setActiveView('table')}\r\n                            >\r\n                                Table View\r\n                            </Button>\r\n                            <Button\r\n                                tag='label'\r\n                                className={classnames('btn-icon view-btn list-view-btn', {\r\n                                    active: activeView === 'graph'\r\n                                })}\r\n                                color='primary'\r\n                                outline={activeView !== 'graph'}\r\n                                onClick={() => setActiveView('graph')}\r\n                            >\r\n                                Graph View\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n\r\n            {activeView !== 'graph' ? (\r\n                <div>\r\n                    <Row>\r\n                        <Col lg='5' className='d-flex py-2'>\r\n                            <Card className='invoice-preview-card w-100'>\r\n                                <CardBody className='invoice-padding'>\r\n                                    <div className=\"align-items-center d-flex ms-0 mb-2 justify-content-between\">\r\n                                        <h4 className='text-truncate'>Summary</h4>\r\n\r\n                                        {productionGraphData.length !== 0 && (\r\n                                            <CSVLink\r\n                                                headers={[\r\n                                                    {label: \"Component\", key: \"component\"},\r\n                                                    {label: \"Production PCS\", key: \"productionPCS\"},\r\n                                                    {label: \"Rejection (kg)\", key: \"rejection\"}\r\n                                                ]}\r\n                                                target=\"_blank\"\r\n                                                data={getSummeryCsvData(productionGraphData)}\r\n                                                className=\"btn btn-primary\"\r\n                                                asyncOnClick={true}\r\n                                                onClick={() => setCurrentDateTime(getCustomDateTimeStamp)}\r\n                                                filename={`SummeryReport_${currentDateTime}.csv`}\r\n                                            >\r\n                                                Export CSV\r\n                                            </CSVLink>\r\n                                        )}\r\n                                    </div>\r\n\r\n                                    {/*<div className=\"d-flex my-1\">*/}\r\n                                    {/*    <div className=\"d-flex\">*/}\r\n                                    {/*        <span className=\"fw-bold\">From : </span>*/}\r\n                                    {/*        <span>01.01.2020</span>*/}\r\n                                    {/*    </div>*/}\r\n                                    {/*    <div className=\"d-flex ms-3\">*/}\r\n                                    {/*        <span className=\"fw-bold\">To : </span>*/}\r\n                                    {/*        <span>15.01.2020</span>*/}\r\n                                    {/*    </div>*/}\r\n                                    {/*</div>*/}\r\n                                    <div className='d-flex align-items-center mb-2'>\r\n                                        <Label className='form-label' for='default-picker'>\r\n                                            Date Range\r\n                                        </Label>\r\n                                        <Flatpickr\r\n                                            value={picker}\r\n                                            id='range-picker'\r\n                                            className='form-control ms-1'\r\n                                            style={{width: 210}}\r\n                                            onChange={date => {\r\n                                                if (date.length === 2) {\r\n                                                    setPicker(date)\r\n                                                    dispatch(toggleLoading())\r\n                                                    getSummeryDate(date, selectStyleId, {\r\n                                                        page: 0,\r\n                                                        currentPage: 0\r\n                                                    })\r\n                                                    getSummeryDateForGraph(date, selectedStyle)\r\n                                                }\r\n                                            }}\r\n                                            onClose={(selectedDates, dateStr, instance) => {\r\n                                                if (selectedDates.length === 1) {\r\n                                                    instance.setDate([picker[0], picker[1]], true)\r\n                                                }\r\n                                            }}\r\n                                            options={{\r\n                                                mode: 'range',\r\n                                                showMonths: 2\r\n                                                // defaultDate:[new Date(picker[0]), new Date(picker[1])]\r\n                                            }}\r\n                                            placeholder={\"Select Date Range\"}\r\n                                        />\r\n\r\n                                    </div>\r\n\r\n                                    {store.data?.length !== 0 ? (\r\n                                        <>\r\n                                            <Table responsive borderless size=\"sm\" className=\"table-outline\">\r\n                                                <thead>\r\n                                                <tr>\r\n                                                    <th className='text-center'\r\n                                                        style={{borderTopLeftRadius: 8}}>Component\r\n                                                    </th>\r\n                                                    <th className='px-2 text-center'><span>Production</span> <br/>\r\n                                                        <span>PCS</span></th>\r\n                                                    <th className='text-center' style={{borderTopRightRadius: 8}}>\r\n                                                        <span>Rejection</span> <br/> <span\r\n                                                        className=\"text-lowercase\">(Kg)</span></th>\r\n                                                </tr>\r\n                                                </thead>\r\n                                                <tbody>\r\n                                                {tableBodyItems}\r\n                                                </tbody>\r\n                                            </Table>\r\n                                            <ReactPaginate\r\n                                                nextLabel=''\r\n                                                breakLabel='...'\r\n                                                previousLabel=''\r\n                                                pageCount={store.total || 1}\r\n                                                activeClassName='active'\r\n                                                breakClassName='page-item'\r\n                                                pageClassName={'page-item'}\r\n                                                breakLinkClassName='page-link'\r\n                                                nextLinkClassName={'page-link'}\r\n                                                pageLinkClassName={'page-link'}\r\n                                                nextClassName={'page-item next'}\r\n                                                previousLinkClassName={'page-link'}\r\n                                                previousClassName={'page-item prev'}\r\n                                                onPageChange={page => handlePagination('SUMMARY', page)}\r\n                                                forcePage={store.params.currentPage !== 0 ? store.params.currentPage - 1 : 0}\r\n                                                containerClassName={'pagination react-paginate justify-content-end pt-1'}\r\n                                            />\r\n                                        </>\r\n                                    ) : emptyUI(isFetched1)}\r\n\r\n                                </CardBody>\r\n                            </Card>\r\n                        </Col>\r\n                        <Col lg='7' className='d-flex py-2'>\r\n                            <Card className='invoice-preview-card w-100'>\r\n                                <CardBody className='invoice-padding'>\r\n                                    <div className=\"align-items-center d-flex ms-0 mb-2 justify-content-between\">\r\n                                        <h4 className='text-truncate'>Interval Summary</h4>\r\n\r\n                                        {intervalSummaryListForCsv.length !== 0 && (\r\n                                            <CSVLink\r\n                                                headers={[\r\n                                                    {\r\n                                                        label: activeSubView === 'DAILY' ? 'Date' : activeSubView === 'MONTHLY' ? 'Month' : 'Year',\r\n                                                        key: \"date\"\r\n                                                    },\r\n                                                    {label: \"Component\", key: \"component\"},\r\n                                                    {label: \"Production PCS\", key: \"production\"},\r\n                                                    {label: \"Rejection (kg)\", key: \"rejection\"}\r\n                                                ]}\r\n                                                target=\"_blank\"\r\n                                                data={intervalSummaryListForCsv}\r\n                                                className=\"btn btn-primary\"\r\n                                                asyncOnClick={true}\r\n                                                onClick={() => setCurrentDateTime(getCustomDateTimeStamp)}\r\n                                                filename={`IntervalSummeryReport_${currentDateTime}.csv`}\r\n                                            >\r\n                                                Export CSV\r\n                                            </CSVLink>\r\n                                        )}\r\n                                    </div>\r\n                                    <Col lg='12'>\r\n                                        <div className=\"d-flex my-1\">\r\n                                            {/*<Input*/}\r\n                                            {/*    type='select'*/}\r\n                                            {/*    id='rows-per-page'*/}\r\n                                            {/*    value={activeSubView}*/}\r\n                                            {/*    onChange={handleSummarySelection}*/}\r\n                                            {/*    className='form-control'*/}\r\n                                            {/*>*/}\r\n                                            {/*    {INTERVAL_SUMMARY_TYPES.map((item, i) => (*/}\r\n                                            {/*        <option value={item.value} key={i}>{item.label}</option>*/}\r\n                                            {/*    ))}*/}\r\n                                            {/*</Input>*/}\r\n                                            <Select\r\n                                                className='react-select ms-1'\r\n                                                classNamePrefix='select'\r\n                                                placeholder='Style'\r\n                                                options={INTERVAL_SUMMARY_TYPES}\r\n                                                theme={selectThemeColors}\r\n                                                value={INTERVAL_SUMMARY_TYPES.find((c) => c.value === activeSubView)}\r\n                                                onChange={handleSummarySelection}\r\n                                                styles={customStyles}\r\n                                            />\r\n                                            <div className='d-flex align-items-center mb-2 ms-2 w-75'>\r\n                                                <Label className='form-label' for='default-picker'>\r\n                                                    Date Range\r\n                                                </Label>\r\n                                                <Flatpickr\r\n                                                    // value={intervalPicker}\r\n                                                    id='range-picker'\r\n                                                    className='form-control ms-1'\r\n                                                    onChange={date => {\r\n                                                        if (date.length === 2) {\r\n                                                            setIntervalPicker(date)\r\n                                                            dispatch(toggleLoading())\r\n                                                            getIntervalSummeryList(selectStyleId, activeSubView, {\r\n                                                                page: 0,\r\n                                                                currentPage: 0\r\n                                                            }, date)\r\n                                                            getIntervalSummaryForGraph(selectStyleId, activeSubView, date)\r\n                                                        }\r\n                                                    }}\r\n                                                    placeholder={\"Select Date Range\"}\r\n                                                    onClose={(selectedDates, dateStr, instance) => {\r\n                                                        if (selectedDates.length === 1) {\r\n                                                            instance.setDate([intervalPicker[0], intervalPicker[1]], true)\r\n                                                        }\r\n                                                    }}\r\n                                                    style={{width: 210}}\r\n                                                    options={{\r\n                                                        mode: 'range',\r\n                                                        showMonths: 2,\r\n                                                        defaultDate: intervalPicker\r\n                                                    }}\r\n                                                    ref={refComp}\r\n                                                />\r\n                                                {intervalPicker.length !== 0 && (\r\n                                                    <div\r\n                                                        className='ms-2'>\r\n                                                        <X size={18}\r\n                                                           className='cursor-pointer'\r\n                                                           onClick={() => {\r\n                                                               refComp.current.flatpickr.clear()\r\n                                                               dispatch(toggleLoading())\r\n                                                               setIntervalPicker([])\r\n                                                               getIntervalSummeryList(selectedStyle, activeSubView, {\r\n                                                                   page: 0,\r\n                                                                   currentPage: 0\r\n                                                               }, [])\r\n                                                               getIntervalSummaryForGraph(selectedStyle, activeSubView, [])\r\n                                                           }}\r\n                                                        />\r\n                                                    </div>\r\n                                                )}\r\n                                            </div>\r\n                                        </div>\r\n                                    </Col>\r\n\r\n                                    {storeIntervalSummery.data.length !== 0 ? (\r\n                                        <>\r\n                                            <Table responsive borderless size=\"sm\" className=\"table-outline\">\r\n                                                <thead>\r\n                                                <tr>\r\n                                                    <th className='text-center'\r\n                                                        style={{borderTopLeftRadius: 8}}>{activeSubView === 'DAILY' ? 'Date' : activeSubView === 'MONTHLY' ? 'Month' : 'Year'}</th>\r\n                                                    <th className='text-center'>Component</th>\r\n                                                    <th className='px-2 text-center'><span>Production</span> <br/>\r\n                                                        <span>PCS</span></th>\r\n                                                    <th className='text-center' style={{borderTopRightRadius: 8}}>\r\n                                                        <span>Rejection</span> <br/> <span\r\n                                                        className=\"text-lowercase\">(Kg)</span></th>\r\n                                                </tr>\r\n                                                </thead>\r\n                                                <tbody>\r\n                                                {tableBodyItems2}\r\n                                                </tbody>\r\n                                            </Table>\r\n                                            <ReactPaginate\r\n                                                nextLabel=''\r\n                                                breakLabel='...'\r\n                                                previousLabel=''\r\n                                                pageCount={storeIntervalSummery.total || 1}\r\n                                                activeClassName='active'\r\n                                                breakClassName='page-item'\r\n                                                pageClassName={'page-item'}\r\n                                                breakLinkClassName='page-link'\r\n                                                nextLinkClassName={'page-link'}\r\n                                                pageLinkClassName={'page-link'}\r\n                                                nextClassName={'page-item next'}\r\n                                                previousLinkClassName={'page-link'}\r\n                                                previousClassName={'page-item prev'}\r\n                                                onPageChange={page => handlePagination('INTERVAL_SUMMARY', page)}\r\n                                                forcePage={storeIntervalSummery.params.currentPage !== 0 ? storeIntervalSummery.params.currentPage - 1 : 0}\r\n                                                containerClassName={'pagination react-paginate justify-content-end pt-1'}\r\n                                            />\r\n                                        </>\r\n                                    ) : emptyUI(isFetched2)}\r\n\r\n                                </CardBody>\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col lg='7' className='d-flex'>\r\n                            <Card className='invoice-preview-card w-100'>\r\n                                <CardBody className='invoice-padding'>\r\n                                    <div className=\"align-items-center d-flex ms-0 mb-2 justify-content-between\">\r\n                                        <h4 className='text-truncate'>Machine Averages</h4>\r\n\r\n                                        {machineSummaryList.length !== 0 && (\r\n                                            <CSVLink\r\n                                                headers={[\r\n                                                    {label: \"knitting Diameter\", key: \"knittingDiameter\"},\r\n                                                    {label: \"Number of used machines\", key: \"machines\"},\r\n                                                    {label: \"Total Production Weight\", key: \"weight\"},\r\n                                                    {label: \"Total Machine Average\", key: \"average\"}\r\n                                                ]}\r\n                                                target=\"_blank\"\r\n                                                data={getMachineAverageCsvData(machineSummaryList)}\r\n                                                className=\"btn btn-primary\"\r\n                                                asyncOnClick={true}\r\n                                                onClick={() => setCurrentDateTime(getCustomDateTimeStamp)}\r\n                                                filename={`MachineAveragesReport_${currentDateTime}.csv`}\r\n                                            >\r\n                                                Export CSV\r\n                                            </CSVLink>\r\n                                        )}\r\n                                    </div>\r\n\r\n                                    {storeMachineSummery.data.length !== 0 ? (\r\n                                        <>\r\n                                            <Table responsive borderless size=\"sm\" className=\"table-outline\">\r\n                                                <thead>\r\n                                                <tr>\r\n                                                    <th className='text-center' style={{borderTopLeftRadius: 8}}>\r\n                                                        <span>Knitting</span> <br/> <span>Diameter</span></th>\r\n                                                    <th className='px-2 text-center'><span>Number of</span> <br/> <span>Used Machines</span>\r\n                                                    </th>\r\n                                                    <th className='text-center'><span>Total Production</span>\r\n                                                        <br/> <span>Weight <span className=\"text-lowercase\">(Kg)</span></span>\r\n                                                    </th>\r\n                                                    <th className='text-center' style={{borderTopRightRadius: 8}}>\r\n                                                        <span>Total Machine</span> <br/> <span>Average</span></th>\r\n                                                </tr>\r\n                                                </thead>\r\n                                                <tbody>\r\n                                                {tableBodyItems3}\r\n                                                </tbody>\r\n                                            </Table>\r\n                                            <ReactPaginate\r\n                                                nextLabel=''\r\n                                                breakLabel='...'\r\n                                                previousLabel=''\r\n                                                pageCount={storeMachineSummery.total || 1}\r\n                                                activeClassName='active'\r\n                                                breakClassName='page-item'\r\n                                                pageClassName={'page-item'}\r\n                                                breakLinkClassName='page-link'\r\n                                                nextLinkClassName={'page-link'}\r\n                                                pageLinkClassName={'page-link'}\r\n                                                nextClassName={'page-item next'}\r\n                                                previousLinkClassName={'page-link'}\r\n                                                previousClassName={'page-item prev'}\r\n                                                onPageChange={page => handlePagination('MACHINE_SUMMARY', page)}\r\n                                                forcePage={storeMachineSummery.params.currentPage !== 0 ? storeMachineSummery.params.currentPage - 1 : 0}\r\n                                                containerClassName={'pagination react-paginate justify-content-end pt-1'}\r\n                                            />\r\n                                        </>\r\n                                    ) : emptyUI(isFetched3)}\r\n\r\n                                </CardBody>\r\n                            </Card>\r\n\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            ) : (\r\n                <Row className=\"mt-2\">\r\n                    <Col lg={6}>\r\n                        <Col>\r\n                            <SummeryBarChart\r\n                                primaryBar={'#FFEF5F'}\r\n                                secondaryBar={'#FFA115'}\r\n                                labelColor={'#6e6b7b'}\r\n                                dataList={productionGraphData}\r\n                                gridLineColor={'rgba(200, 200, 200, 0.2)'}\r\n                                picker={picker}\r\n                                onClose={(selectedDates, dateStr, instance) => {\r\n                                    if (selectedDates.length === 1) {\r\n                                        instance.setDate([picker[0], picker[1]], true)\r\n                                    }\r\n                                }}\r\n                                onChangeDate={date => {\r\n                                    if (date.length === 2) {\r\n                                        setPicker(date)\r\n                                        dispatch(toggleLoading())\r\n                                        getSummeryDate(date, selectStyleId, {\r\n                                            page: 0,\r\n                                            currentPage: 0\r\n                                        })\r\n                                        getSummeryDateForGraph(date, selectedStyle)\r\n                                    }\r\n                                }}\r\n                                fetched={isFetched4}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <MachineAvgChart\r\n                                primaryBar={'#666EE8'}\r\n                                secondaryBar={'#EA5455'}\r\n                                labelColor={'#6e6b7b'}\r\n                                gridLineColor={'rgba(200, 200, 200, 0.2)'}\r\n                                dataList={machineSummaryList}\r\n                                fetched={isFetched5}\r\n                            />\r\n                        </Col>\r\n                    </Col>\r\n\r\n\r\n                    <Col lg={6}>\r\n                        <IntervalSummeryChart\r\n                            primaryBar={'#28dac6'}\r\n                            secondaryBar={'#CB4335'}\r\n                            labelColor={'#6e6b7b'}\r\n                            gridLineColor={'rgba(200, 200, 200, 0.2)'}\r\n                            activeView={activeSubView}\r\n                            onDailyClick={async () => {\r\n                                await setActiveSubView('DAILY')\r\n                                dispatch(toggleLoading())\r\n                                getIntervalSummeryList(selectedStyle, 'DAILY', {\r\n                                    page: 0,\r\n                                    currentPage: 0\r\n                                }, intervalPicker)\r\n                                getIntervalSummaryForGraph(selectedStyle, 'DAILY', intervalPicker)\r\n                            }}\r\n                            onMonthlyClick={async () => {\r\n                                await setActiveSubView('MONTHLY')\r\n                                dispatch(toggleLoading())\r\n                                getIntervalSummeryList(selectedStyle, 'MONTHLY', {\r\n                                    page: 0,\r\n                                    currentPage: 0\r\n                                }, intervalPicker)\r\n                                getIntervalSummaryForGraph(selectedStyle, 'MONTHLY', intervalPicker)\r\n                            }}\r\n                            onYearlyClick={async () => {\r\n                                await setActiveSubView('YEARLY')\r\n                                dispatch(toggleLoading())\r\n                                getIntervalSummeryList(selectedStyle, 'YEARLY', {\r\n                                    page: 0,\r\n                                    currentPage: 0\r\n                                }, intervalPicker)\r\n                                getIntervalSummaryForGraph(selectedStyle, 'YEARLY', intervalPicker)\r\n                            }}\r\n                            dataList={intervalSummaryList}\r\n                            picker={intervalPicker}\r\n                            onCloseClick={() => {\r\n                                dispatch(toggleLoading())\r\n                                setIntervalPicker([])\r\n                                getIntervalSummeryList(selectedStyle, activeSubView, {\r\n                                    page: 0,\r\n                                    currentPage: 0\r\n                                }, [])\r\n                                getIntervalSummaryForGraph(selectedStyle, activeSubView, [])\r\n                            }}\r\n                            onClosePicker={(selectedDates, dateStr, instance) => {\r\n                                if (selectedDates.length === 1) {\r\n                                    instance.setDate([intervalPicker[0], intervalPicker[1]], true)\r\n                                }\r\n                            }}\r\n                            onChangeDateRange={date => {\r\n                                if (date.length === 2) {\r\n                                    setIntervalPicker(date)\r\n                                    dispatch(toggleLoading())\r\n                                    getIntervalSummeryList(selectStyleId, activeSubView, {\r\n                                        page: 0,\r\n                                        currentPage: 0\r\n                                    }, date)\r\n                                    getIntervalSummaryForGraph(selectStyleId, activeSubView, date)\r\n                                }\r\n                            }}\r\n                            fetched={isFetched6}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            )}\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProductionAnalysis\r\n","import React, {useEffect, useState} from \"react\"\r\nimport {Button, Card, CardBody, Col, Input, Label, Row, Table} from \"reactstrap\"\r\nimport ReactPaginate from \"react-paginate\"\r\nimport * as ProductionRejectionServices from '../../../services/productionRejection-resources'\r\n// eslint-disable-next-line no-unused-vars\r\nimport {customToastMsg, emptyUI, getCustomDateTimeStamp, roundNumber, searchValidation} from \"../../../utility/Utils\"\r\nimport {Sliders, X} from \"react-feather\"\r\nimport {useDispatch} from \"react-redux\"\r\nimport {toggleLoading} from '@store/loading'\r\nimport {CSVLink} from \"react-csv\"\r\n\r\nlet prev = 0\r\n\r\nconst OrderAnalysis = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const [store, setStore] = useState({\r\n        allData: [],\r\n        data: [],\r\n        params: {\r\n            page: 0,\r\n            currentPage: 0\r\n        },\r\n        total: 0\r\n    })\r\n    const [poNumber, setPoNumber] = useState('')\r\n    const [styleNumber, setStyleNumber] = useState('')\r\n    const [isFetched, setIsFetched] = useState(false)\r\n    const [csvDataList, setCsvDataList] = useState([])\r\n    const [currentDateTime, setCurrentDateTime] = useState('')\r\n\r\n    const getOrderAnalysis = async (params) => {\r\n        dispatch(toggleLoading())\r\n        await ProductionRejectionServices.getOrderSummary(params.page)\r\n            .then(res => {\r\n                if (res.success) {\r\n                    setStore({allData: res.data.content, data: res.data.content, params, total: res.data.totalPages})\r\n                } else {\r\n                    customToastMsg(res.data.title, res.status)\r\n                }\r\n                dispatch(toggleLoading())\r\n                setIsFetched(true)\r\n            })\r\n    }\r\n\r\n    const getAllCsvData = async () => {\r\n        await ProductionRejectionServices.getOrderSummaryForCsv()\r\n            .then(res => {\r\n                if (res.success) {\r\n                    const list = []\r\n                    res.data.content.map(item => {\r\n                        list.push({\r\n                            poNumber:item.poNumber,\r\n                            styleNumber:item.styleNumber,\r\n                            productionWeight:roundNumber(item.productionWeight),\r\n                            rejectionWeight:roundNumber(item.rejectionWeight),\r\n                            rejectionPercentage:item.rejectionPercentage\r\n                        })\r\n                    })\r\n                    setCsvDataList(list)\r\n                }\r\n            })\r\n    }\r\n\r\n    const searchOrderAnalysis = async (params) => {\r\n        const body = {\r\n            poNumber: searchValidation(params.poNumber),\r\n            styleNumber: searchValidation(params.styleNumber)\r\n        }\r\n        await ProductionRejectionServices.searchOrderAnalysis(body, params.page)\r\n            .then(res => {\r\n                if (res.success) {\r\n                    setStore({allData: res.data.content, data: res.data.content, params, total: res.data.totalPages})\r\n                } else {\r\n                    customToastMsg(res.data.title, res.status)\r\n                }\r\n                dispatch(toggleLoading())\r\n            })\r\n    }\r\n\r\n    const getAllSearchedCsvData = async (params) => {\r\n        const body = {\r\n            poNumber: searchValidation(params.poNumber),\r\n            styleNumber: searchValidation(params.styleNumber)\r\n        }\r\n        await ProductionRejectionServices.searchOrderAnalysisForCsv(body)\r\n            .then(res => {\r\n                if (res.success) {\r\n                    const list = []\r\n                    res.data.content.map(item => {\r\n                        list.push({\r\n                            poNumber:item.poNumber,\r\n                            styleNumber:item.styleNumber,\r\n                            productionWeight:roundNumber(item.productionWeight),\r\n                            rejectionWeight:roundNumber(item.rejectionWeight),\r\n                            rejectionPercentage:item.rejectionPercentage\r\n                        })\r\n                    })\r\n                    setCsvDataList(list)\r\n                }\r\n            })\r\n    }\r\n\r\n    useEffect(async () => {\r\n        await getOrderAnalysis({page: 0, currentPage: 0})\r\n        await getAllCsvData()\r\n    }, [])\r\n\r\n    const tableBodyItems = store.data.map((item, i) => (\r\n        <tr key={i} style={{fontSize: 12}}>\r\n            <td className='py-1'>\r\n                <p className='card-text fw-bold mb-25 text-center'>{item.poNumber}</p>\r\n            </td>\r\n            <td className='py-1'>\r\n                <p className='card-text fw-bold mb-25 text-center'>{item.styleNumber}</p>\r\n            </td>\r\n            <td className='py-1'>\r\n                <p className='card-text fw-bold mb-25 text-center'>{roundNumber(item.productionWeight)}</p>\r\n            </td>\r\n            <td className='py-1'>\r\n                <p className='card-text fw-bold mb-25 text-center'>{roundNumber(item.rejectionWeight)}</p>\r\n            </td>\r\n            {/*<td className='py-1'>*/}\r\n            {/*    <p className='card-text fw-bold mb-25 text-center'>{item.totalConsumption}</p>*/}\r\n            {/*</td>*/}\r\n            <td className='py-1'>\r\n                <p className='card-text fw-bold mb-25 text-center'>{item.rejectionPercentage}</p>\r\n            </td>\r\n        </tr>\r\n    ))\r\n\r\n    const handlePagination = async page => {\r\n        if (styleNumber.length === 0 && poNumber.length === 0) {\r\n            await getOrderAnalysis({page: page.selected, currentPage: page.selected + 1})\r\n        } else {\r\n            await searchOrderAnalysis({\r\n                page: page.selected,\r\n                currentPage: page.selected + 1,\r\n                poNumber,\r\n                styleNumber\r\n            })\r\n            await getAllSearchedCsvData({\r\n                poNumber,\r\n                styleNumber\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    const onSearch = async (value, type) => {\r\n        let id = poNumber\r\n        let style = styleNumber\r\n        switch (type) {\r\n            case 'PO_NUMBER':\r\n                setPoNumber(value)\r\n                id = value\r\n                break\r\n            case 'STYLE':\r\n                setStyleNumber(value)\r\n                style = value\r\n                break\r\n            default:\r\n                break\r\n        }\r\n\r\n        prev = new Date().getTime()\r\n        setTimeout(async () => {\r\n            const now = new Date().getTime()\r\n            if (now - prev >= 1000) {\r\n                if (id.length === 0 && style.length === 0) {\r\n                    await getOrderAnalysis({page: 0, currentPage: 0})\r\n                    await getAllCsvData()\r\n                } else {\r\n                    dispatch(toggleLoading())\r\n                    await searchOrderAnalysis({\r\n                        page: 0,\r\n                        currentPage: 0,\r\n                        poNumber: id,\r\n                        styleNumber: style\r\n                    })\r\n                    await getAllSearchedCsvData({\r\n                        poNumber: id,\r\n                        styleNumber: style\r\n                    })\r\n                }\r\n            }\r\n        }, 1000)\r\n    }\r\n\r\n    return (\r\n        <div className='invoice-list-table-header w-100 py-1' style={{whiteSpace: 'nowrap'}}>\r\n            <Row>\r\n                <Col lg='12' className='d-flex align-items-center mb-1 justify-content-between w-100'>\r\n                    <div className=\"d-flex align-items-center\">\r\n                        <Col className='d-flex align-items-center'>\r\n                            <div className='d-flex align-items-center'>\r\n                                <Label className='form-label' for='poNumber'>\r\n                                    PO Number\r\n                                </Label>\r\n                                <div className='inputWithButton'>\r\n                                    <Input\r\n                                        id='poNumber'\r\n                                        className='ms-50 me-2 w-100'\r\n                                        type='text'\r\n                                        value={poNumber}\r\n                                        onChange={async e => {\r\n                                            await onSearch(e.target.value, 'PO_NUMBER')\r\n                                        }}\r\n                                        placeholder='Search PO Number'\r\n                                        autoComplete=\"off\"\r\n                                    />\r\n                                    {poNumber.length !== 0 && (\r\n                                        <X size={18}\r\n                                           className='cursor-pointer close-btn'\r\n                                           onClick={async () => await onSearch('', 'PO_NUMBER')}\r\n                                        />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n\r\n                        </Col>\r\n                        <Col className='d-flex align-items-center ms-1'>\r\n                            <div className='d-flex align-items-center'>\r\n                                <Label className='form-label' for='styleNumber'>\r\n                                    Style Number\r\n                                </Label>\r\n                                <div className='inputWithButton'>\r\n                                    <Input\r\n                                        id='styleNumber'\r\n                                        className='ms-50 me-2 w-100'\r\n                                        type='text'\r\n                                        value={styleNumber}\r\n                                        onChange={async e => {\r\n                                            await onSearch(e.target.value, 'STYLE')\r\n                                        }}\r\n                                        placeholder='Search Style Number'\r\n                                        autoComplete=\"off\"\r\n                                    />\r\n                                    {styleNumber.length !== 0 && (\r\n                                        <X size={18}\r\n                                           className='cursor-pointer close-btn'\r\n                                           onClick={async () => await onSearch('', 'STYLE')}\r\n                                        />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n\r\n                        </Col>\r\n                    </div>\r\n                    {csvDataList.length !== 0 && (\r\n                        <CSVLink\r\n                            headers={[\r\n                                {label: \"PO Number\", key: \"poNumber\"},\r\n                                {label: \"Style Number\", key: \"styleNumber\"},\r\n                                {label: \"Total Production Weight (kg)\", key: \"productionWeight\"},\r\n                                {label: \"Total Rejection Weight\", key: \"rejectionWeight\"},\r\n                                {label: \"Rejection Percentage\", key: \"rejectionPercentage\"}\r\n                            ]}\r\n                            target=\"_blank\"\r\n                            data={csvDataList}\r\n                            className=\"btn btn-primary\"\r\n                            asyncOnClick={true}\r\n                            onClick={() => {\r\n                                setCurrentDateTime(getCustomDateTimeStamp)\r\n                            }}\r\n                            filename={`OrderAnalysisReport_${currentDateTime}.csv`}\r\n                        >\r\n                            Export CSV\r\n                        </CSVLink>\r\n                    )}\r\n                </Col>\r\n\r\n            </Row>\r\n\r\n            <Card className=\"mt-2\">\r\n                {store.data?.length !== 0 ? (\r\n                    <>\r\n                        <div className='invoice-list-dataTable react-dataTable'>\r\n                            <Table responsive size=\"sm\" className=\"invoice-list-dataTable react-dataTable\">\r\n                                <thead>\r\n                                <tr>\r\n                                    <th className='text-center' style={{borderTopLeftRadius: 8}}>PO Number</th>\r\n                                    <th className='text-center'>Style Number</th>\r\n                                    <th className='px-2 text-center'><span>Total Production</span> <br/>\r\n                                        <span>Weight <span className=\"text-lowercase\">(Kg)</span></span></th>\r\n                                    <th className='px-2 text-center'><span>Total Rejection</span> <br/>\r\n                                        <span>Weight <span className=\"text-lowercase\">(Kg)</span></span>\r\n                                    </th>\r\n                                    {/*<th className='px-2 text-center'><span>Total</span> <br/> <span>Consumption</span></th>*/}\r\n                                    <th className='text-center' style={{borderTopRightRadius: 8}}><span>Rejection</span>\r\n                                        <br/>\r\n                                        <span>Percentage</span></th>\r\n                                </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                {tableBodyItems}\r\n                                </tbody>\r\n                            </Table>\r\n                        </div>\r\n                        <ReactPaginate\r\n                            nextLabel=''\r\n                            breakLabel='...'\r\n                            previousLabel=''\r\n                            pageCount={store.total || 1}\r\n                            activeClassName='active'\r\n                            breakClassName='page-item'\r\n                            pageClassName={'page-item'}\r\n                            breakLinkClassName='page-link'\r\n                            nextLinkClassName={'page-link'}\r\n                            pageLinkClassName={'page-link'}\r\n                            nextClassName={'page-item next'}\r\n                            previousLinkClassName={'page-link'}\r\n                            previousClassName={'page-item prev'}\r\n                            onPageChange={page => handlePagination(page)}\r\n                            forcePage={store.params.currentPage !== 0 ? store.params.currentPage - 1 : 0}\r\n                            containerClassName={'pagination react-paginate justify-content-end p-1'}\r\n                        />\r\n                    </>\r\n                ) : emptyUI(isFetched)}\r\n\r\n            </Card>\r\n            {/*    </CardBody>*/}\r\n            {/*</Card>*/}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OrderAnalysis\r\n","// eslint-disable-next-line no-unused-vars\r\nimport React, {useEffect, useState} from \"react\"\r\nimport {Card, CardBody, Col, Row, Table, Button} from \"reactstrap\"\r\nimport * as OrderServices from '../../../services/order-resources'\r\nimport ReactPaginate from \"react-paginate\"\r\nimport Select from \"react-select\"\r\nimport {selectThemeColors} from '@utils'\r\nimport * as stylesService from \"../../../services/style-resources\"\r\nimport * as productionRejectionServices from \"../../../services/productionRejection-resources\"\r\nimport {customToastMsg, emptyUI, getCustomDateTimeStamp, isEmpty, roundNumber} from \"../../../utility/Utils\"\r\nimport {CSVLink} from \"react-csv\"\r\n\r\nlet data2 = null\r\nconst YarnAnalysis = () => {\r\n\r\n    const [ordersList, setOrdersList] = useState([])\r\n    const [selectedOrder, setSelectedOrder] = useState('')\r\n    const [styleList, setStyleList] = useState([])\r\n    // eslint-disable-next-line no-unused-vars\r\n    const [selectedStyle, setSelectedStyle] = useState('')\r\n    const [productionWeight, setProductionWeight] = useState(null)\r\n    const [rejectionWeight, setRejectionWeight] = useState(null)\r\n    const [rejectionPercentage, setRejectionPercentage] = useState(null)\r\n    const [totalConsumption, setTotalConsumption] = useState(null)\r\n    // eslint-disable-next-line no-unused-vars\r\n    const [selectedPONum, setSelectedPONum] = useState('')\r\n    const [isFetched, setIsFetched] = useState(false)\r\n    const [currentDateTime, setCurrentDateTime] = useState('')\r\n    // eslint-disable-next-line no-unused-vars\r\n    const [csvDataList, setCsvDataList] = useState([])\r\n\r\n    // eslint-disable-next-line no-unused-vars\r\n    const [store, setStore] = useState({\r\n        allData: [],\r\n        data: [],\r\n        params: {\r\n            page: 0,\r\n            currentPage: 0\r\n        },\r\n        total: 0\r\n    })\r\n\r\n\r\n    function actualWeightCalculation(totalConsumption, ratio) {\r\n        return roundNumber(totalConsumption * ratio)\r\n    }\r\n\r\n    const getYarnAnalysisList = async (params, orderId, styleId) => {\r\n        await productionRejectionServices.getYarnAnalysisList(params.page, orderId, styleId)\r\n            .then(res => {\r\n                if (res.success) {\r\n                    setStore({allData: res.data.content, data: res.data.content, params, total: res.data.totalPages})\r\n                }\r\n                setIsFetched(true)\r\n            })\r\n    }\r\n\r\n    // eslint-disable-next-line no-unused-vars\r\n    const getCsvDataList = async (order, style) => {\r\n        const list = []\r\n        await productionRejectionServices.getYarnAnalysisListForCsv(order, style)\r\n            .then(async res => {\r\n                if (res.success) {\r\n                    res.data.content.map(item => {\r\n                        list.push({\r\n                            supplier: item.supplier,\r\n                            article: item.article,\r\n                            twist: item.twist,\r\n                            actualWeight: !isEmpty(data2) ? actualWeightCalculation(Number(data2), Number(item.ratio)) : \"\",\r\n                            estimatedWeight: !isEmpty(item.estimatedWeight) ? roundNumber(item.estimatedWeight) : \"\"\r\n                        })\r\n                    })\r\n                    await setCsvDataList(list)\r\n                }\r\n            })\r\n    }\r\n\r\n    const getYarnAnalysisDetails = async (poNumber, styleId) => {\r\n\r\n        const body = {\r\n            poNumber,\r\n            styleId\r\n        }\r\n\r\n        let value = null\r\n\r\n        await productionRejectionServices.getYarnAnalysisDetails(body)\r\n            .then(res => {\r\n                if (res.success) {\r\n                    setProductionWeight(res.data.productionWeight)\r\n                    setRejectionWeight(res.data.rejectionWeight)\r\n                    setRejectionPercentage(res.data.rejectionPercentage)\r\n                    setTotalConsumption(res.data.totalConsumption)\r\n                    value = res.data.totalConsumption\r\n                } else {\r\n                    customToastMsg(res.data.title, res.status)\r\n                }\r\n            })\r\n        data2 = value\r\n    }\r\n\r\n    const getStylesComponents = async (id, poNum) => {\r\n        await stylesService.getStylesByOrderId(id)\r\n            .then(async res => {\r\n                if (res.success) {\r\n                    const list = []\r\n                    res.data.map(item => {\r\n                        list.push({\r\n                            label: item.styleNumber,\r\n                            value: item.styleId\r\n                        })\r\n                    })\r\n                    if (list.length !== 0) {\r\n                        setStyleList(list)\r\n                        if (poNum !== undefined) {\r\n                            setSelectedStyle(list[0].value)\r\n                            await getYarnAnalysisDetails(id, list[0].value)\r\n                            await getYarnAnalysisList({page: 0, currentPage: 0}, id, list[0].value)\r\n                            await getCsvDataList(id, list[0].value)\r\n                        } else {\r\n                            setSelectedStyle(null)\r\n                        }\r\n                    } else {\r\n                        setStyleList([])\r\n                        setSelectedStyle(null)\r\n                    }\r\n                }\r\n            })\r\n    }\r\n\r\n    const getAllOrders = async () => {\r\n        await OrderServices.getOrders()\r\n            .then(async res => {\r\n                if (res.success) {\r\n                    const list = []\r\n                    res.data.map(item => {\r\n                        list.push({\r\n                            label: item.poNumber,\r\n                            value: item.id\r\n                        })\r\n                    })\r\n                    if (list.length !== 0) {\r\n                        setOrdersList(list)\r\n                        setSelectedOrder(list[0].value)\r\n                        setSelectedPONum(list[0].label)\r\n                        await getStylesComponents(list[0].value, list[0].label)\r\n                    }\r\n\r\n                }\r\n            })\r\n    }\r\n\r\n    useEffect(async () => {\r\n        await getAllOrders()\r\n    }, [])\r\n\r\n    const handleStyleSelection = async (e) => {\r\n        setSelectedStyle(e.value)\r\n        await getYarnAnalysisDetails(selectedOrder, e.value)\r\n        await getYarnAnalysisList({page: 0, currentPage: 0}, selectedOrder, e.value)\r\n        await getCsvDataList(selectedOrder, e.value)\r\n    }\r\n\r\n    const handleOrderSelection = async (e) => {\r\n        setSelectedOrder(e.value)\r\n        setSelectedPONum(e.label)\r\n        setProductionWeight('')\r\n        setRejectionWeight('')\r\n        setRejectionPercentage('')\r\n        setTotalConsumption('')\r\n        const params = {page: 0, currentPage: 0}\r\n        setStore({allData: [], data: [], params, total: 0})\r\n        setCsvDataList([])\r\n        await getStylesComponents(e.value, e.label)\r\n    }\r\n\r\n    const tableBodyItems = store.data.map((item, i) => (\r\n        <tr key={i} style={{fontSize: 12}}>\r\n            <td>\r\n                <p className='text-center'>{item.supplier}</p>\r\n            </td>\r\n            <td>\r\n                <p className='text-center'>{item.article}</p>\r\n            </td>\r\n            <td>\r\n                <p className='text-center'>{!isEmpty(item.twist) ? item.twist : \"\"}</p>\r\n            </td>\r\n            <td>\r\n                <p className='text-center'>{!isEmpty(totalConsumption) ? actualWeightCalculation(Number(totalConsumption), Number(item.ratio)) : \"\"}</p>\r\n            </td>\r\n            <td>\r\n                <p className='text-center'>{!isEmpty(item.estimatedWeight) ? roundNumber(item.estimatedWeight) : \"\"}</p>\r\n            </td>\r\n        </tr>\r\n    ))\r\n\r\n    const handlePagination = async (page) => {\r\n        await getYarnAnalysisList({page: page.selected, currentPage: page.selected + 1}, selectedOrder, selectedStyle)\r\n    }\r\n\r\n    const customStyles = {\r\n        container: provided => ({\r\n            ...provided,\r\n            width: 180\r\n            // minWidth: \"100%\"\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className='invoice-list-table-header w-100 py-2' style={{whiteSpace: 'nowrap'}}>\r\n            <Row>\r\n                <Col lg='12' className='d-flex align-items-center mb-1'>\r\n                    <div className='d-flex w-100 justify-content-between align-items-center'>\r\n                        <div className=\"d-flex w-100 align-items-center\">\r\n                            <div className=\"d-flex align-items-center\">\r\n                                <label htmlFor='rows-per-page'>Order To Analyse</label>\r\n                                <Select\r\n                                    className='react-select ms-1'\r\n                                    classNamePrefix='select'\r\n                                    placeholder='PO Number'\r\n                                    options={ordersList}\r\n                                    theme={selectThemeColors}\r\n                                    value={ordersList.find((c) => c.value === selectedOrder)}\r\n                                    onChange={handleOrderSelection}\r\n                                    styles={customStyles}\r\n                                />\r\n                            </div>\r\n                            <div className=\"d-flex align-items-center ms-2\">\r\n                                <label htmlFor='rows-per-page'>Style</label>\r\n                                <Select\r\n                                    className='react-select ms-1'\r\n                                    classNamePrefix='select'\r\n                                    placeholder='Style'\r\n                                    options={styleList}\r\n                                    theme={selectThemeColors}\r\n                                    value={selectedStyle !== null ? styleList.find((c) => c.value === selectedStyle) : selectedStyle}\r\n                                    onChange={handleStyleSelection}\r\n                                    styles={customStyles}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        {csvDataList.length !== 0 && (\r\n                            <CSVLink\r\n                                headers={[\r\n                                    {label: \"Supplier\", key: \"supplier\"},\r\n                                    {label: \"Article\", key: \"article\"},\r\n                                    {label: \"Twist\", key: \"twist\"},\r\n                                    {label: \"Actual Weight\", key: \"actualWeight\"},\r\n                                    {label: \"Estimated Weight\", key: \"estimatedWeight\"}\r\n                                ]}\r\n                                target=\"_blank\"\r\n                                data={csvDataList}\r\n                                className=\"btn btn-primary\"\r\n                                asyncOnClick={true}\r\n                                onClick={() => {\r\n                                    setCurrentDateTime(getCustomDateTimeStamp)\r\n                                }}\r\n                                filename={`YarnAnalysisReport_${currentDateTime}.csv`}\r\n                            >\r\n                                Export CSV\r\n                            </CSVLink>\r\n                        )}\r\n\r\n                    </div>\r\n                </Col>\r\n                <Col lg='12' className='py-2'>\r\n                    <Card className='invoice-preview-card'>\r\n                        <CardBody className='invoice-padding'>\r\n                            <Row className=\"mt-1\">\r\n                                <Col lg={4}>\r\n                                    <div className='d-flex'>\r\n                                        <p className='invoice-date-title'>Total Production Weight</p>\r\n                                        <p>:</p>\r\n                                        <p className='ms-1 fw-bold fw-bolder'>{!isEmpty(productionWeight) ? `${roundNumber(productionWeight)}Kg` : \"\"}</p>\r\n                                    </div>\r\n                                </Col>\r\n                                <Col lg={4}>\r\n                                    <div className='d-flex'>\r\n                                        <p className='invoice-date-title'>Total Rejection Weight</p>\r\n                                        <p>:</p>\r\n                                        <p className='ms-1 fw-bold fw-bolder'>{!isEmpty(rejectionWeight) ? `${roundNumber(rejectionWeight)}Kg` : \"\"}</p>\r\n                                    </div>\r\n                                </Col>\r\n                                <Col lg={4}>\r\n                                    <div className='d-flex'>\r\n                                        <p className='invoice-date-title'>Total Yarn Consumption</p>\r\n                                        <p>:</p>\r\n                                        <p className='ms-1 fw-bold fw-bolder'>{!isEmpty(totalConsumption) ? `${roundNumber(totalConsumption)}Kg` : \"\"}</p>\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col lg={4}>\r\n                                    <div className='d-flex'>\r\n                                        <p className='invoice-date-title'>Rejection Percentage</p>\r\n                                        <p>:</p>\r\n                                        <p className='ms-1 fw-bold fw-bolder'>{!isEmpty(rejectionPercentage) ? `${roundNumber(rejectionPercentage)}%` : \"\"}</p>\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            {store.data?.length !== 0 ? (\r\n                                <>\r\n                                    <div className='invoice-list-dataTable react-dataTable my-2'>\r\n                                        <Table responsive bordered size=\"sm\"\r\n                                               className=\"invoice-list-dataTable react-dataTable\">\r\n                                            <thead>\r\n                                            <tr>\r\n                                                <th className='text-center' rowSpan=\"2\" colSpan=\"1\"\r\n                                                    style={{paddingTop: 18}}>Supplier\r\n                                                </th>\r\n                                                <th className='text-center' rowSpan=\"2\" colSpan=\"1\"\r\n                                                    style={{paddingTop: 18}}>Article\r\n                                                </th>\r\n                                                <th className='text-center' rowSpan=\"2\" colSpan=\"1\"\r\n                                                    style={{paddingTop: 18}}>Twist\r\n                                                </th>\r\n                                                <th className='text-center' colSpan=\"2\">Weight <span\r\n                                                    className=\"text-lowercase\">(Kg)</span></th>\r\n                                            </tr>\r\n                                            <tr className=\"mt-2\">\r\n                                                <th className=\"text-center\">Actual</th>\r\n                                                <th className=\"text-center\">Estimated</th>\r\n                                            </tr>\r\n                                            </thead>\r\n                                            <tbody>\r\n                                            {tableBodyItems}\r\n                                            </tbody>\r\n                                        </Table>\r\n                                    </div>\r\n                                    <ReactPaginate\r\n                                        nextLabel=''\r\n                                        breakLabel='...'\r\n                                        previousLabel=''\r\n                                        pageCount={store.total || 1}\r\n                                        activeClassName='active'\r\n                                        breakClassName='page-item'\r\n                                        pageClassName={'page-item'}\r\n                                        breakLinkClassName='page-link'\r\n                                        nextLinkClassName={'page-link'}\r\n                                        pageLinkClassName={'page-link'}\r\n                                        nextClassName={'page-item next'}\r\n                                        previousLinkClassName={'page-link'}\r\n                                        previousClassName={'page-item prev'}\r\n                                        onPageChange={page => handlePagination(page)}\r\n                                        forcePage={store.params.currentPage !== 0 ? store.params.currentPage - 1 : 0}\r\n                                        containerClassName={'pagination react-paginate justify-content-end pt-1'}\r\n                                    />\r\n                                </>\r\n                            ) : emptyUI(isFetched)}\r\n\r\n                        </CardBody>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default YarnAnalysis\r\n","// ** React Imports\r\nimport React, {Fragment, useEffect} from 'react'\r\n\r\n// ** Reactstrap Imports\r\nimport {Card, Nav, NavItem, NavLink, TabContent, TabPane} from 'reactstrap'\r\n\r\nimport {Link} from \"react-router-dom\"\r\nimport img1 from '@src/assets/images/tabs/analytics-black.svg'\r\nimport img1White from '@src/assets/images/tabs/analytics-white.svg'\r\nimport ProductionAnalysis from \"./analytics-details/ProductionAnalytisis\"\r\nimport OrderAnalysis from \"./analytics-details/OrderAnalysis\"\r\nimport YarnAnalysis from \"./analytics-details/YarnAnalysis\"\r\n\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nconst AnalyticsTab = ({active, toggleTab}) => {\r\n\r\n    useEffect(async () => {\r\n\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <Nav pills className='mt-3 mb-0 pb-0 ms-2'>\r\n                <NavItem>\r\n                    <NavLink active={active === '1'} onClick={() => toggleTab('1')}\r\n                             tag={Link}\r\n                             to={`/analytics/production-analysis`}\r\n                    >\r\n                        <img src={active === '1' ? img1White : img1} alt=\"img\" height={20} width={20} className=\"me-1\"/>\r\n                        <span className='fw-bold'>Production Analysis</span>\r\n                    </NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                    <NavLink active={active === '2'} onClick={async () => toggleTab('2')}\r\n                             tag={Link}\r\n                             to={`/analytics/yarn-analysis`}\r\n                    >\r\n                        <img src={active === '2' ? img1White : img1} alt=\"img\" height={20} width={20} className=\"me-1\"/>\r\n                        <span className='fw-bold'>Yarn Analysis</span>\r\n                    </NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                    <NavLink active={active === '3'} onClick={async () => toggleTab('3')}\r\n                             tag={Link}\r\n                             to={`/analytics/order-analysis`}\r\n                    >\r\n                        <img src={active === '3' ? img1White : img1} alt=\"img\" height={20} width={20} className=\"me-1\"/>\r\n                        <span className='fw-bold'>Order Analysis</span>\r\n                    </NavLink>\r\n                </NavItem>\r\n            </Nav>\r\n\r\n            <hr className='invoice-spacing mt-0 pt-0'/>\r\n\r\n            <TabContent activeTab={active}>\r\n                <TabPane tabId='1'>\r\n                    <ProductionAnalysis/>\r\n                </TabPane>\r\n                <TabPane tabId='2'>\r\n                    <YarnAnalysis/>\r\n                </TabPane>\r\n                <TabPane tabId='3'>\r\n                    <OrderAnalysis/>\r\n                </TabPane>\r\n            </TabContent>\r\n        </Fragment>\r\n    )\r\n}\r\nexport default AnalyticsTab\r\n","// ** Reactstrap Imports\r\nimport {Card, CardBody} from 'reactstrap'\r\nimport React, {useEffect, useState} from \"react\"\r\nimport AnalyticsTab from './AnalyticsTabs'\r\n\r\nconst PreviewStyles = () => {\r\n    const [active, setActive] = useState(\"1\")\r\n    const toggleTab = tab => {\r\n        if (active !== tab) {\r\n            setActive(tab)\r\n        }\r\n    }\r\n\r\n    useEffect(async () => {\r\n        const lastParam = window.location.href.split(\"/\").pop()\r\n        switch (lastParam) {\r\n            case 'production-analysis':\r\n                setActive('1')\r\n                break\r\n            case 'yarn-analysis':\r\n                setActive('2')\r\n                break\r\n            case 'order-analysis':\r\n                setActive('3')\r\n                break\r\n            default:\r\n                setActive('1')\r\n                break\r\n        }\r\n\r\n    }, [])\r\n\r\n    return (\r\n        // <Card className='invoice-preview-card'>\r\n        //     <CardBody className='invoice-padding pb-0'>\r\n                <div>\r\n                    <h3 className='text-primary ms-2'>Analytics</h3>\r\n\r\n                    <AnalyticsTab active={active} toggleTab={toggleTab}/>\r\n                </div>\r\n\r\n\r\n        //     </CardBody>\r\n        // </Card>\r\n    )\r\n}\r\n\r\nexport default PreviewStyles\r\n","import React from \"react\"\r\nimport {Col, Row} from \"reactstrap\"\r\nimport PreviewAnalytics from \"./PreviewAnalytics\"\r\n\r\nconst AnalyticsView = () => {\r\n    return (\r\n        <div className='invoice-preview-wrapper'>\r\n            <Row className='invoice-preview'>\r\n                <Col>\r\n                    <PreviewAnalytics/>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AnalyticsView\r\n","import axios from 'axios'\r\nimport apiConfig from './apiConfig'\r\nimport * as constants from \"../const/constant\"\r\nimport * as commonFunc from \"../utility/Utils\"\r\n\r\nimport * as authService from \"./auth\"\r\nimport qs from \"qs\"\r\nimport {clearLocalStorage} from \"../utility/Utils\";\r\n\r\nlet body = {}\r\nlet headers\r\n\r\nconst renewTokenHandler = async (apiObject) => {\r\n    let result\r\n    // renew token - start\r\n    const obj = {\r\n        refresh_token: localStorage.getItem(constants.StorageStrings.REFRESH_TOKEN),\r\n        grant_type: 'refresh_token'\r\n    }\r\n    await authService.renewToken(qs.stringify(obj))\r\n        .then(async response => {\r\n            if (response.access_token) {\r\n                Cookies.set(constants.StorageStrings.ACCESS_TOKEN, response.access_token)\r\n                localStorage.setItem(constants.StorageStrings.ACCESS_TOKEN, response.access_token)\r\n                Cookies.set(constants.StorageStrings.REFRESH_TOKEN, response.refresh_token)\r\n                localStorage.setItem(constants.StorageStrings.REFRESH_TOKEN, response.refresh_token)\r\n                // eslint-disable-next-line no-use-before-define\r\n                result = await callApi(apiObject)\r\n            } else {\r\n                await commonFunc.removeCookiesValues()\r\n                await commonFunc.clearLocalStorage()\r\n                window.location.reload()\r\n            }\r\n        })\r\n    // renew token - end\r\n    return result\r\n}\r\n\r\n\r\nexport const callApi = async (apiObject) => {\r\n    const method = apiObject.method ? apiObject.method.toLowerCase() : 'get'\r\n\r\n    if (method === 'post' || method === 'put' || method === 'patch') {\r\n        body = apiObject.body ? apiObject.body : {}\r\n    }\r\n\r\n    headers = {\r\n        'Content-Type': apiObject.urlencoded ? 'application/x-www-form-urlencoded' : apiObject.multipart ? 'multipart/form-data' : 'application/json'\r\n    }\r\n    if (apiObject.authentication) {\r\n        const access_token = localStorage.getItem(constants.StorageStrings.ACCESS_TOKEN)\r\n        if (access_token) {\r\n            headers.Authorization = `Bearer ${access_token}`\r\n        }\r\n    }\r\n    if (apiObject.isBasicAuth) {\r\n        headers.Authorization = 'Basic';\r\n    }\r\n\r\n\r\n    const url = `${apiConfig.serverUrl}/${apiConfig.basePath}/${apiObject.endpoint}`\r\n    let result\r\n\r\n    await axios[method](url, method !== 'get' && method !== 'delete' ? body : {headers}, {headers})\r\n        .then(async response => {\r\n            const code = response.status\r\n\r\n            if (code === 204) {\r\n                result = {\r\n                    data: {},\r\n                    status: null,\r\n                    success: false,\r\n                    message: \"\"\r\n                };\r\n            } else {\r\n                result = {\r\n                    data: response.data === '' ? [] : response.data,\r\n                    status: response.data.message === 'Success' || response.data.message === 'OK' ? 1 : 0,\r\n                    success: response.data.message === 'Success' || response.data.message === 'OK' || response.data.message === undefined,\r\n                    message: response.data.message\r\n                };\r\n            }\r\n        })\r\n        .catch(async error => {\r\n            if (error !== undefined) {\r\n                if (error.response === undefined) {\r\n                    result = await {\r\n                        success: false,\r\n                        status: 0,\r\n                        message: \"Your connection was interrupted\",\r\n                        data: null\r\n                    }\r\n                } else if (error.response.status === 401) {\r\n\r\n                    // if (apiObject.state === \"renewToken\") {\r\n                    //     result = await {success: false, status: 2, message: error.response.data.message};\r\n                    // }\r\n                    // if (apiObject.state === \"login\") {\r\n                    //     result = await {success: false, status: 0, message: error.response.data.message};\r\n                    // }\r\n\r\n                    // result = await renewTokenHandler(apiObject)\r\n\r\n                    result = await {\r\n                        success: false,\r\n                        status: 0,\r\n                        message: error.response.data.message,\r\n                        data: null\r\n                    }\r\n\r\n                    await clearLocalStorage();\r\n                    window.location.reload()\r\n\r\n\r\n                } else if (error.response.status === 403) {\r\n                    result = await {\r\n                        success: false,\r\n                        status: 2,\r\n                        message: \"Access is denied.\",\r\n                        data: null\r\n                    }\r\n                } else if (error.response.status === 417 || error.response.status === 404) {\r\n                    result = await {\r\n                        success: false,\r\n                        status: 0,\r\n                        message: \"Oops! Something went wrong.\",\r\n                        data: null\r\n                    }\r\n                } else if (error.response.data !== undefined) {\r\n                    result = await {\r\n                        success: false,\r\n                        status: 0,\r\n                        message: error.response.data.message,\r\n                        data: null\r\n                    }\r\n                } else {\r\n                    result = await {\r\n                        success: false,\r\n                        status: 2,\r\n                        message: \"Sorry, something went wrong.\",\r\n                        data: null\r\n                    }\r\n                }\r\n            } else {\r\n                result = await {\r\n                    success: false,\r\n                    status: 2,\r\n                    message: \"Your connection was interrupted!\",\r\n                    data: null\r\n                }\r\n            }\r\n        })\r\n\r\n    return result\r\n}\r\n\r\nexport default {callApi, renewTokenHandler}\r\n","export const SERVER_URL = process.env.REACT_APP_SERVER_URL\r\n\r\nconst conf = {\r\n    serverUrl: SERVER_URL,\r\n    basePath: 'api/v1',\r\n    redirect: ``\r\n}\r\n\r\nexport default conf\r\n","import ApiService from './apiServices'\r\n\r\nexport async function renewToken(token) {\r\n    const apiObject = {}\r\n    apiObject.method = 'POST'\r\n    apiObject.authentication = false\r\n    apiObject.isBasicAuth = true\r\n    apiObject.urlencoded = true\r\n    apiObject.endpoint = 'authorize'\r\n    apiObject.body = token\r\n    apiObject.multipart = false\r\n    apiObject.state = \"renewToken\"\r\n    apiObject.grant_type = \"refresh_token\"\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function authUser(userCredentials) {\r\n    const apiObject = {}\r\n    apiObject.method = 'POST'\r\n    apiObject.authentication = false\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = 'login'\r\n    apiObject.body = userCredentials\r\n    apiObject.multipart = false\r\n    apiObject.state = \"login\"\r\n    apiObject.grant_type = \"password\"\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function getUserResources() {\r\n    const apiObject = {}\r\n    apiObject.method = 'GET'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = 'users'\r\n    apiObject.body = null\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function getUserDetails() {\r\n    const apiObject = {}\r\n    apiObject.method = 'GET'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = 'account'\r\n    apiObject.body = null\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function changeUserPassword(body) {\r\n    const apiObject = {}\r\n    apiObject.method = 'POST'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = 'account/change-password'\r\n    apiObject.body = body\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n","import ApiService from \"./apiServices\"\r\n\r\nexport async function getAllStyles() {\r\n    const apiObject = {}\r\n    apiObject.method = 'GET'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `styles/all`\r\n    apiObject.body = null\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function getStyleById(id) {\r\n    const apiObject = {}\r\n    apiObject.method = 'GET'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `styles/${id}`\r\n    apiObject.body = null\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function getAllStylesForTable(page) {\r\n    const apiObject = {}\r\n    apiObject.method = 'GET'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `styles/list?page=${page}&size=10`\r\n    apiObject.body = null\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function getComponentsByStyleId(id) {\r\n    const apiObject = {}\r\n    apiObject.method = 'GET'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `style_components/style_id/${id}`\r\n    apiObject.body = null\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function getAllStyleComponents() {\r\n    const apiObject = {}\r\n    apiObject.method = 'GET'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `style_components`\r\n    apiObject.body = null\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function getDiameterConfirmationByStyleId(id, page) {\r\n    const apiObject = {}\r\n    apiObject.method = 'GET'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `diameter-confirmations/style_id/${id}?page=${page}&size=10&sort=knittingDiameter.knittingDiameter,asc&sort=styleComponent.component.type,asc`\r\n    apiObject.body = null\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function saveDiameterConfirmation(body) {\r\n    const apiObject = {}\r\n    apiObject.method = 'POST'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `diameter-confirmations`\r\n    apiObject.body = body\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function updateDiameterConfirmation(body, isCheckEditPermission) {\r\n    const apiObject = {}\r\n    apiObject.method = 'PUT'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `diameter-confirmations/update/${isCheckEditPermission}`\r\n    apiObject.body = body\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function getConsumptionConfirmationByStyleId(body) {\r\n    const apiObject = {}\r\n    apiObject.method = 'POST'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `consumption-confirmations/filter`\r\n    apiObject.body = body\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function saveConsumptionConfirmation(body) {\r\n    const apiObject = {}\r\n    apiObject.method = 'POST'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `consumption-confirmations/add`\r\n    apiObject.body = body\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function saveStyleComponent(body) {\r\n    const apiObject = {}\r\n    apiObject.method = 'POST'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `style_components/add`\r\n    apiObject.body = body\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function updateStyleComponent(body) {\r\n    const apiObject = {}\r\n    apiObject.method = 'PUT'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `style_components/update`\r\n    apiObject.body = body\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function updateConsumptionConfirmation(body) {\r\n    const apiObject = {}\r\n    apiObject.method = 'PUT'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `consumption-confirmations/update`\r\n    apiObject.body = body\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function getSizesByStyleId(id) {\r\n    const apiObject = {}\r\n    apiObject.method = 'GET'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `diameter-confirmations/size/${id}`\r\n    apiObject.body = null\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function removeConsumptionConfirmation(id) {\r\n    const apiObject = {}\r\n    apiObject.method = 'DELETE'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `consumption-confirmations/${id}`\r\n    apiObject.body = null\r\n    apiObject.multipart = false\r\n    apiObject.state = \"consumption\"\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function addNewStyle(body) {\r\n    const apiObject = {}\r\n    apiObject.method = 'POST'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `styles`\r\n    apiObject.body = body\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function getStylesByOrderId(id) {\r\n    const apiObject = {}\r\n    apiObject.method = 'GET'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `order-infos/styles/${id}`\r\n    apiObject.body = null\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function getStyleDetailsById(id) {\r\n    const apiObject = {}\r\n    apiObject.method = 'GET'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `styles/colors/${id}`\r\n    apiObject.body = null\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function searchStyleDetails(page, styleNumber) {\r\n    const apiObject = {}\r\n    apiObject.method = 'GET'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `styles/list/filter/${styleNumber}?page=${page}&size=10`\r\n    apiObject.body = null\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n","import {Chart, registerables} from '../dist/chart.esm';\n\nChart.register(...registerables);\n\nexport default Chart;\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n","import defineProperty from './_define_property';\n\nexport default function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}","import objectWithoutPropertiesLoose from './_object_without_properties_loose';\n\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n","import arrayWithHoles from './_array_with_holes';\nimport iterableToArrayLimit from './_iterable_to_array';\nimport nonIterableRest from './_non_iterable_rest';\n\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n","export default function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n","import type { ForwardedRef } from 'react';\nimport type {\n  ChartType,\n  ChartData,\n  DefaultDataPoint,\n  ChartDataset,\n  ChartOptions,\n  Chart,\n} from 'chart.js';\n\nexport function reforwardRef<T>(ref: ForwardedRef<T>, value: T) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}\n\nexport function setOptions<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(chart: Chart<TType, TData, TLabel>, nextOptions: ChartOptions<TType>) {\n  chart.options = { ...nextOptions };\n}\n\nexport function setLabels<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextLabels: TLabel[] | undefined\n) {\n  currentData.labels = nextLabels;\n}\n\nexport function setDatasets<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextDatasets: ChartDataset<TType, TData>[]\n) {\n  currentData.datasets = nextDatasets.map(nextDataset => {\n    // given the new set, find it's current match\n    const currentDataset = currentData.datasets.find(\n      dataset =>\n        dataset.label === nextDataset.label && dataset.type === nextDataset.type\n    );\n\n    // There is no original to update, so simply add new one\n    if (!currentDataset || !nextDataset.data) return { ...nextDataset };\n\n    Object.assign(currentDataset, nextDataset);\n\n    return currentDataset;\n  });\n}\n\nexport function cloneData<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(data: ChartData<TType, TData, TLabel>) {\n  const nextData: ChartData<TType, TData, TLabel> = {\n    labels: [],\n    datasets: [],\n  };\n\n  setLabels(nextData, data.labels);\n  setDatasets(nextData, data.datasets);\n\n  return nextData;\n}\n","import React, { useEffect, useRef, useState, forwardRef } from 'react';\nimport type { ForwardedRef, MouseEvent } from 'react';\nimport ChartJS from 'chart.js/auto';\nimport type { ChartData, ChartType, DefaultDataPoint } from 'chart.js';\n\nimport type { ChartProps, TypedChartComponent } from './types';\nimport {\n  reforwardRef,\n  cloneData,\n  setOptions,\n  setLabels,\n  setDatasets,\n} from './utils';\n\nconst noopData = {\n  datasets: [],\n};\n\nfunction ChartComponent<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  {\n    height = 150,\n    width = 300,\n    redraw = false,\n    type,\n    data: dataProp,\n    options,\n    plugins = [],\n    getDatasetAtEvent,\n    getElementAtEvent,\n    getElementsAtEvent,\n    fallbackContent,\n    onClick: onClickProp,\n    ...props\n  }: ChartProps<TType, TData, TLabel>,\n  ref: ForwardedRef<ChartJS<TType, TData, TLabel>>\n) {\n  type TypedChartJS = ChartJS<TType, TData, TLabel>;\n  type TypedChartData = ChartData<TType, TData, TLabel>;\n\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const chartRef = useRef<TypedChartJS | null>();\n  /**\n   * In case `dataProp` is function use internal state\n   */\n  const [computedData, setComputedData] = useState<TypedChartData>();\n  const data: TypedChartData =\n    computedData || (typeof dataProp === 'function' ? noopData : dataProp);\n\n  const renderChart = () => {\n    if (!canvasRef.current) return;\n\n    chartRef.current = new ChartJS(canvasRef.current, {\n      type,\n      data: cloneData(data),\n      options,\n      plugins,\n    });\n\n    reforwardRef(ref, chartRef.current);\n  };\n\n  const destroyChart = () => {\n    reforwardRef(ref, null);\n\n    if (chartRef.current) {\n      chartRef.current.destroy();\n      chartRef.current = null;\n    }\n  };\n\n  const onClick = (event: MouseEvent<HTMLCanvasElement>) => {\n    if (onClickProp) {\n      onClickProp(event);\n    }\n\n    const { current: chart } = chartRef;\n\n    if (!chart) return;\n\n    getDatasetAtEvent &&\n      getDatasetAtEvent(\n        chart.getElementsAtEventForMode(\n          event.nativeEvent,\n          'dataset',\n          { intersect: true },\n          false\n        ),\n        event\n      );\n    getElementAtEvent &&\n      getElementAtEvent(\n        chart.getElementsAtEventForMode(\n          event.nativeEvent,\n          'nearest',\n          { intersect: true },\n          false\n        ),\n        event\n      );\n    getElementsAtEvent &&\n      getElementsAtEvent(\n        chart.getElementsAtEventForMode(\n          event.nativeEvent,\n          'index',\n          { intersect: true },\n          false\n        ),\n        event\n      );\n  };\n\n  /**\n   * In case `dataProp` is function,\n   * then update internal state\n   */\n  useEffect(() => {\n    if (typeof dataProp === 'function' && canvasRef.current) {\n      setComputedData(dataProp(canvasRef.current));\n    }\n  }, [dataProp]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && options) {\n      setOptions(chartRef.current, options);\n    }\n  }, [redraw, options]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current) {\n      setLabels(chartRef.current.config.data, data.labels);\n    }\n  }, [redraw, data.labels]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && data.datasets) {\n      setDatasets(chartRef.current.config.data, data.datasets);\n    }\n  }, [redraw, data.datasets]);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    if (redraw) {\n      destroyChart();\n      setTimeout(renderChart);\n    } else {\n      chartRef.current.update();\n    }\n  }, [redraw, options, data.labels, data.datasets]);\n\n  useEffect(() => {\n    renderChart();\n\n    return () => destroyChart();\n  }, []);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      role='img'\n      height={height}\n      width={width}\n      onClick={onClick}\n      {...props}\n    >\n      {fallbackContent}\n    </canvas>\n  );\n}\n\nexport const Chart = forwardRef(ChartComponent) as TypedChartComponent;\n","import React, { forwardRef } from 'react';\nimport { ChartType } from 'chart.js';\n\nimport { ChartProps, ChartJSOrUndefined, TypedChartComponent } from './types';\nimport { Chart } from './chart';\n\nfunction createTypedChart<T extends ChartType>(type: T) {\n  return forwardRef<ChartJSOrUndefined<T>, Omit<ChartProps<T>, 'type'>>(\n    (props, ref) => <Chart {...props} ref={ref} type={type} />\n  ) as TypedChartComponent<T, true>;\n}\n\nexport const Line = createTypedChart('line');\n\nexport const Bar = createTypedChart('bar');\n\nexport const Radar = createTypedChart('radar');\n\nexport const Doughnut = createTypedChart('doughnut');\n\nexport const PolarArea = createTypedChart('polarArea');\n\nexport const Bubble = createTypedChart('bubble');\n\nexport const Pie = createTypedChart('pie');\n\nexport const Scatter = createTypedChart('scatter');\n","import ApiService from \"./apiServices\"\r\n\r\nexport async function getAllOrders(page) {\r\n    const apiObject = {}\r\n    apiObject.method = 'GET'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `orders?page=${page}&size=10&sort=poDate,desc`\r\n    apiObject.body = null\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function getOrders() {\r\n    const apiObject = {}\r\n    apiObject.method = 'GET'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `orders/list`\r\n    apiObject.body = null\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function saveOrder(body) {\r\n    const apiObject = {}\r\n    apiObject.method = 'POST'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `orders`\r\n    apiObject.body = body\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function getOrderById(id) {\r\n    const apiObject = {}\r\n    apiObject.method = 'GET'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `orders/${id}`\r\n    apiObject.body = null\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function getOrderInfosByPONumber(id, page) {\r\n    const apiObject = {}\r\n    apiObject.method = 'GET'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `order-infos/list/${id}?page=${page}&size=10`\r\n    apiObject.body = null\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function createOrderInfos(body) {\r\n    const apiObject = {}\r\n    apiObject.method = 'POST'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `order-infos`\r\n    apiObject.body = body\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function updateOrderInfos(body, id) {\r\n    const apiObject = {}\r\n    apiObject.method = 'PUT'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `order-infos/${id}`\r\n    apiObject.body = body\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function getAllEstimatedConsumptions(orderId, page) {\r\n    const apiObject = {}\r\n    apiObject.method = 'GET'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `estimations/order-items/${orderId}?page=${page}&size=10&sort=colorName,asc&sort=garmentSize,asc&sort=articleName,asc` // please update current endpoint\r\n    apiObject.body = null\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function getOrderItems(id) {\r\n    const apiObject = {}\r\n    apiObject.method = 'GET'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `estimations/order-items/${id}?page=0&size=0`\r\n    apiObject.body = null\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function getAllEstimatedYarnRequirements(orderId, page) {\r\n    const apiObject = {}\r\n    apiObject.method = 'GET'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `estimations/order/${orderId}?page=${page}&size=10&sort=supplierName,asc&sort=articleName,asc` // please update current endpoint\r\n    apiObject.body = null\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function getAllEstimatedYarnRequirementsForCsv(orderId) {\r\n    const apiObject = {}\r\n    apiObject.method = 'GET'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `estimations/order/${orderId}?page=0&size=0`\r\n    apiObject.body = null\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function searchOrders(page, body) {\r\n    const apiObject = {}\r\n    apiObject.method = 'POST'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `orders/filter?page=${page}&size=10`\r\n    apiObject.body = body\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function searchEstimatedYarnRequirements(orderId, body, page) {\r\n    const apiObject = {}\r\n    apiObject.method = 'POST'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `estimations/order-items/filter/${orderId}?page=${page}&size=10`\r\n    apiObject.body = body\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function searchEstimatedYarnRequirementsForCsv(orderId, body) {\r\n    const apiObject = {}\r\n    apiObject.method = 'POST'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `estimations/order-items/filter/${orderId}?page=0&size=0`\r\n    apiObject.body = body\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n","import ApiService from \"./apiServices\"\r\n\r\nexport async function getAllData(page) {\r\n    const apiObject = {}\r\n    apiObject.method = 'GET'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `production-and-rejections?page=${page}&size=10`\r\n    apiObject.body = null\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function getDateRange() {\r\n    const apiObject = {}\r\n    apiObject.method = 'GET'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `production-and-rejections?page=0&size=0`\r\n    apiObject.body = null\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function saveNewRecord(body) {\r\n    const apiObject = {}\r\n    apiObject.method = 'POST'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `production-and-rejections/add`\r\n    apiObject.body = body\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function updateRecord(body) {\r\n    const apiObject = {}\r\n    apiObject.method = 'PUT'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `production-and-rejections/update`\r\n    apiObject.body = body\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function getSummeryList(page, body) {\r\n    const apiObject = {}\r\n    apiObject.method = 'POST'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `production-and-rejections/summary?page=${page}&size=10`\r\n    apiObject.body = body\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function getSummeryGraph(body) {\r\n    const apiObject = {}\r\n    apiObject.method = 'POST'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `production-and-rejections/summary/list`\r\n    apiObject.body = body\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function getIntervalSummery(page, body) {\r\n    const apiObject = {}\r\n    apiObject.method = 'POST'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `production-and-rejections/interval/summary?page=${page}&size=10`\r\n    apiObject.body = body\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function getIntervalSummeryGraph(body) {\r\n    const apiObject = {}\r\n    apiObject.method = 'POST'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `production-and-rejections/interval/summary/list`\r\n    apiObject.body = body\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function getOrderSummary(page) {\r\n    const apiObject = {}\r\n    apiObject.method = 'GET'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `production-and-rejections/order/analysis?page=${page}&size=10`\r\n    apiObject.body = null\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function getOrderSummaryForCsv() {\r\n    const apiObject = {}\r\n    apiObject.method = 'GET'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `production-and-rejections/order/analysis`\r\n    apiObject.body = null\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function getMachineSummary(id, page) {\r\n    const apiObject = {}\r\n    apiObject.method = 'GET'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `production-and-rejections/machine/summary/${id}?page=${page}&size=10`\r\n    apiObject.body = null\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function getMachineSummaryForGraph(id) {\r\n    const apiObject = {}\r\n    apiObject.method = 'GET'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `production-and-rejections/machine/summary/${id}`\r\n    apiObject.body = null\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function getYarnAnalysisDetails(body) {\r\n    const apiObject = {}\r\n    apiObject.method = 'POST'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `production-and-rejections/yarn/analysis`\r\n    apiObject.body = body\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function getYarnAnalysisList(page, orderId, styleId) {\r\n    const apiObject = {}\r\n    apiObject.method = 'GET'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `estimations/yarn/analysis/${orderId}/${styleId}?page=${page}&size=10`\r\n    apiObject.body = null\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function getYarnAnalysisListForCsv(orderId, styleId) {\r\n    const apiObject = {}\r\n    apiObject.method = 'GET'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `estimations/yarn/analysis/${orderId}/${styleId}`\r\n    apiObject.body = null\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function searchOrderAnalysis(body, page) {\r\n    const apiObject = {}\r\n    apiObject.method = 'POST'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `production-and-rejections/order/analysis/filter?page=${page}&size=10`\r\n    apiObject.body = body\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function searchOrderAnalysisForCsv(body) {\r\n    const apiObject = {}\r\n    apiObject.method = 'POST'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `production-and-rejections/order/analysis/filter`\r\n    apiObject.body = body\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function searchProductionRejections(body, page) {\r\n    const apiObject = {}\r\n    apiObject.method = 'POST'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `production-and-rejections/filter?page=${page}&size=10`\r\n    apiObject.body = body\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function searchProductionRejectionsForCsv(body) {\r\n    const apiObject = {}\r\n    apiObject.method = 'POST'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `production-and-rejections/filter?page=0&size=0`\r\n    apiObject.body = body\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n"],"sourceRoot":""}