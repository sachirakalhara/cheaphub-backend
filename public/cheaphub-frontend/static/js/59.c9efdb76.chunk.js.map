{"version":3,"sources":["views/pages/authentication/Login.js","services/apiServices.js","services/apiConfig.js","@core/components/input-password-toggle/index.js","services/auth.js"],"names":["defaultValues","password","loginEmail","Login","useSkin","skin","dispatch","useDispatch","history","useHistory","ability","useContext","AbilityContext","useForm","control","setError","handleSubmit","errors","formState","source","require","default","onSubmit","data","a","Object","values","every","field","length","body","email","toggleLoading","UserAuthService","then","res","success","accessToken","localStorage","setItem","StorageStrings","ACCESS_TOKEN","action","subject","refreshToken","handleLogin","update","push","getHomeRouteForLoggedInUser","login","customToastMsg","PROJ_NAME","message","status","key","type","className","to","onClick","e","preventDefault","lg","sm","src","alt","md","width","height","for","id","name","render","autoFocus","placeholder","invalid","color","block","headers","conf","serverUrl","process","basePath","redirect","renewTokenHandler","apiObject","obj","refresh_token","getItem","constants","REFRESH_TOKEN","grant_type","authService","qs","stringify","response","access_token","Cookies","set","callApi","result","commonFunc","window","location","reload","method","toLowerCase","urlencoded","multipart","authentication","Authorization","isBasicAuth","url","apiConfig","endpoint","axios","code","undefined","catch","error","clearLocalStorage","InputPasswordToggle","forwardRef","props","ref","label","hideIcon","showIcon","visible","htmlFor","iconSize","inputClassName","rest","useState","inputVisibility","setInputVisibility","classnames","size","renderIcon","defaultProps","renewToken","token","state","ApiService","authUser","userCredentials","changeUserPassword"],"mappings":"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","file":"static/js/59.c9efdb76.chunk.js","sourcesContent":["// ** React Imports\r\nimport {useContext, Fragment} from 'react'\r\nimport {Link, useHistory} from 'react-router-dom'\r\n\r\n// ** Custom Hooks\r\nimport {useSkin} from '@hooks/useSkin'\r\n// eslint-disable-next-line no-unused-vars\r\n// import useJwt from '@src/auth/jwt/useJwt'\r\n\r\n// ** Third Party Components\r\nimport {useDispatch} from 'react-redux'\r\nimport {useForm, Controller} from 'react-hook-form'\r\nimport {Facebook, Twitter, Mail, GitHub, HelpCircle, Coffee} from 'react-feather'\r\n\r\n// ** Actions\r\n// eslint-disable-next-line no-unused-vars\r\nimport {handleLogin} from '@store/authentication'\r\n\r\n// ** Context\r\nimport {AbilityContext} from '@src/utility/context/Can'\r\n\r\n// ** Custom Components\r\nimport Avatar from '@components/avatar'\r\nimport InputPasswordToggle from '@components/input-password-toggle'\r\n\r\n// ** Utils\r\n// eslint-disable-next-line no-unused-vars\r\nimport {getHomeRouteForLoggedInUser} from '@utils'\r\n\r\n// ** Reactstrap Imports\r\nimport {Row, Col, Form, Input, Label, Alert, Button, CardText, CardTitle, UncontrolledTooltip} from 'reactstrap'\r\n\r\n// ** Styles\r\nimport '@styles/react/pages/page-authentication.scss'\r\nimport * as UserAuthService from \"../../../services/auth\"\r\n// eslint-disable-next-line no-unused-vars\r\nimport {customToastMsg} from \"../../../utility/Utils\"\r\nimport {PROJ_NAME, StorageStrings} from \"../../../const/constant\"\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nimport {toggleLoading} from '@store/loading'\r\n\r\nconst defaultValues = {\r\n    password: '',\r\n    loginEmail: ''\r\n}\r\n\r\nconst Login = () => {\r\n    // ** Hooks\r\n    const {skin} = useSkin()\r\n    // eslint-disable-next-line no-unused-vars\r\n    const dispatch = useDispatch()\r\n    // eslint-disable-next-line no-unused-vars\r\n    const history = useHistory()\r\n    // eslint-disable-next-line no-unused-vars\r\n    const ability = useContext(AbilityContext)\r\n    const {\r\n        control,\r\n        setError,\r\n        handleSubmit,\r\n        formState: {errors}\r\n    } = useForm({defaultValues})\r\n    const illustration = skin === 'dark' ? 'new-login-avatar.svg' : 'new-login-avatar.svg',\r\n        source = require(`@src/assets/images/pages/${illustration}`).default\r\n\r\n\r\n    const onSubmit = async data => {\r\n        if (Object.values(data).every(field => field.length > 0)) {\r\n\r\n            const body = {\r\n                email: data.loginEmail,\r\n                password: data.password\r\n            }\r\n            // eslint-disable-next-line no-unused-vars\r\n            let accessToken\r\n            dispatch(toggleLoading())\r\n            await UserAuthService.authUser(body)\r\n                .then(async res => {\r\n                    if (!res.success) {\r\n                        customToastMsg(res.message, res.status)\r\n                        dispatch(toggleLoading())\r\n                    } else {\r\n\r\n                        accessToken = res.data.accessToken\r\n                        localStorage.setItem(StorageStrings.ACCESS_TOKEN, res.data.accessToken)\r\n\r\n                        res.ability = [{action: \"manage\", subject: \"all\"}]\r\n                        const data = {...res, accessToken, refreshToken: accessToken}\r\n                        dispatch(handleLogin(data))\r\n                        ability.update(res.ability)\r\n                        history.push(getHomeRouteForLoggedInUser(res.login))\r\n                        dispatch(toggleLoading())\r\n                        customToastMsg(`Welcome,${PROJ_NAME}`, 1, `You have successfully logged in ${PROJ_NAME}. Now you can start to explore. Enjoy!`)\r\n                    }\r\n                })\r\n        } else {\r\n            for (const key in data) {\r\n                if (data[key].length === 0) {\r\n                    setError(key, {\r\n                        type: 'manual'\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='auth-wrapper auth-cover'>\r\n            <Row className='auth-inner m-0'>\r\n                <Link className='brand-logo' to='/' onClick={e => e.preventDefault()}>\r\n                    {/*<svg viewBox='0 0 139 95' version='1.1' height='28'>*/}\r\n                    {/*    <defs>*/}\r\n                    {/*        <linearGradient x1='100%' y1='10.5120544%' x2='50%' y2='89.4879456%' id='linearGradient-1'>*/}\r\n                    {/*            <stop stopColor='#000000' offset='0%'></stop>*/}\r\n                    {/*            <stop stopColor='#FFFFFF' offset='100%'></stop>*/}\r\n                    {/*        </linearGradient>*/}\r\n                    {/*        <linearGradient x1='64.0437835%' y1='46.3276743%' x2='37.373316%' y2='100%'*/}\r\n                    {/*                        id='linearGradient-2'>*/}\r\n                    {/*            <stop stopColor='#EEEEEE' stopOpacity='0' offset='0%'></stop>*/}\r\n                    {/*            <stop stopColor='#FFFFFF' offset='100%'></stop>*/}\r\n                    {/*        </linearGradient>*/}\r\n                    {/*    </defs>*/}\r\n                    {/*    <g id='Page-1' stroke='none' strokeWidth='1' fill='none' fillRule='evenodd'>*/}\r\n                    {/*        <g id='Artboard' transform='translate(-400.000000, -178.000000)'>*/}\r\n                    {/*            <g id='Group' transform='translate(400.000000, 178.000000)'>*/}\r\n                    {/*                <path*/}\r\n                    {/*                    d='M-5.68434189e-14,2.84217094e-14 L39.1816085,2.84217094e-14 L69.3453773,32.2519224 L101.428699,2.84217094e-14 L138.784583,2.84217094e-14 L138.784199,29.8015838 C137.958931,37.3510206 135.784352,42.5567762 132.260463,45.4188507 C128.736573,48.2809251 112.33867,64.5239941 83.0667527,94.1480575 L56.2750821,94.1480575 L6.71554594,44.4188507 C2.46876683,39.9813776 0.345377275,35.1089553 0.345377275,29.8015838 C0.345377275,24.4942122 0.230251516,14.560351 -5.68434189e-14,2.84217094e-14 Z'*/}\r\n                    {/*                    id='Path'*/}\r\n                    {/*                    className='text-primary'*/}\r\n                    {/*                    style={{fill: 'currentColor'}}*/}\r\n                    {/*                ></path>*/}\r\n                    {/*                <path*/}\r\n                    {/*                    d='M69.3453773,32.2519224 L101.428699,1.42108547e-14 L138.784583,1.42108547e-14 L138.784199,29.8015838 C137.958931,37.3510206 135.784352,42.5567762 132.260463,45.4188507 C128.736573,48.2809251 112.33867,64.5239941 83.0667527,94.1480575 L56.2750821,94.1480575 L32.8435758,70.5039241 L69.3453773,32.2519224 Z'*/}\r\n                    {/*                    id='Path'*/}\r\n                    {/*                    fill='url(#linearGradient-1)'*/}\r\n                    {/*                    opacity='0.2'*/}\r\n                    {/*                ></path>*/}\r\n                    {/*                <polygon*/}\r\n                    {/*                    id='Path-2'*/}\r\n                    {/*                    fill='#000000'*/}\r\n                    {/*                    opacity='0.049999997'*/}\r\n                    {/*                    points='69.3922914 32.4202615 32.8435758 70.5039241 54.0490008 16.1851325'*/}\r\n                    {/*                ></polygon>*/}\r\n                    {/*                <polygon*/}\r\n                    {/*                    id='Path-2'*/}\r\n                    {/*                    fill='#000000'*/}\r\n                    {/*                    opacity='0.099999994'*/}\r\n                    {/*                    points='69.3922914 32.4202615 32.8435758 70.5039241 58.3683556 20.7402338'*/}\r\n                    {/*                ></polygon>*/}\r\n                    {/*                <polygon*/}\r\n                    {/*                    id='Path-3'*/}\r\n                    {/*                    fill='url(#linearGradient-2)'*/}\r\n                    {/*                    opacity='0.099999994'*/}\r\n                    {/*                    points='101.428699 0 83.0667527 94.1480575 130.378721 47.0740288'*/}\r\n                    {/*                ></polygon>*/}\r\n                    {/*            </g>*/}\r\n                    {/*        </g>*/}\r\n                    {/*    </g>*/}\r\n                    {/*</svg>*/}\r\n                    {/*<h2 className='brand-text text-primary ms-1'>{PROJ_NAME}</h2>*/}\r\n                </Link>\r\n                <Col className='d-none d-lg-flex align-items-center p-5' lg='8' sm='12'>\r\n                    <div className='w-100 d-lg-flex align-items-center justify-content-center px-5'>\r\n                        <img className='img-fluid' src={source} alt='Login Cover'/>\r\n                    </div>\r\n                </Col>\r\n                <Col className='d-flex align-items-center auth-bg px-2 p-lg-5' lg='4' sm='12'>\r\n                    <Col className='px-xl-2 mx-auto' sm='8' md='6' lg='12'>\r\n                        <div className=\"justify-content-center d-flex mb-5\">\r\n                            <img src={require(`@src/assets/images/logo/new-logo.png`).default} alt=\"logo\" width={139}\r\n                                 height={131}/>\r\n                        </div>\r\n                        {/*<CardTitle tag='h2' className='fw-bold mb-1'>*/}\r\n                        {/*    {`Welcome to ${PROJ_NAME}!`}*/}\r\n                        {/*</CardTitle>*/}\r\n                        {/*<CardText className='mb-2'>Please sign-in to your account and start the adventure</CardText>*/}\r\n                        {/*<Alert color='primary'>*/}\r\n                        {/*  <div className='alert-body font-small-2'>*/}\r\n                        {/*    <p>*/}\r\n                        {/*      <small className='me-50'>*/}\r\n                        {/*        <span className='fw-bold'>Admin:</span> admin@demo.com | admin*/}\r\n                        {/*      </small>*/}\r\n                        {/*    </p>*/}\r\n                        {/*    <p>*/}\r\n                        {/*      <small className='me-50'>*/}\r\n                        {/*        <span className='fw-bold'>Client:</span> client@demo.com | client*/}\r\n                        {/*      </small>*/}\r\n                        {/*    </p>*/}\r\n                        {/*  </div>*/}\r\n                        {/*  <HelpCircle*/}\r\n                        {/*      id='login-tip'*/}\r\n                        {/*      className='position-absolute'*/}\r\n                        {/*      size={18}*/}\r\n                        {/*      style={{ top: '10px', right: '10px' }}*/}\r\n                        {/*  />*/}\r\n                        {/*  <UncontrolledTooltip target='login-tip' placement='left'>*/}\r\n                        {/*    This is just for ACL demo purpose.*/}\r\n                        {/*  </UncontrolledTooltip>*/}\r\n                        {/*</Alert>*/}\r\n                        <Form className='auth-login-form mt-2' onSubmit={handleSubmit(onSubmit)}>\r\n                            <div className='mb-1'>\r\n                                <Label className='form-label' for='login-email'>\r\n                                    User Name\r\n                                </Label>\r\n                                <Controller\r\n                                    id='loginEmail'\r\n                                    name='loginEmail'\r\n                                    control={control}\r\n                                    render={({field}) => (\r\n                                        <Input\r\n                                            autoFocus\r\n                                            placeholder='User Name'\r\n                                            invalid={errors.loginEmail && true}\r\n                                            {...field}\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </div>\r\n                            <div className='mb-1'>\r\n                                <div className='d-flex justify-content-between'>\r\n                                    <Label className='form-label' for='login-password'>\r\n                                        Password\r\n                                    </Label>\r\n                                    {/*<Link to='/forgot-password'>*/}\r\n                                    {/*    <small>Forgot Password?</small>*/}\r\n                                    {/*</Link>*/}\r\n                                </div>\r\n                                <Controller\r\n                                    id='password'\r\n                                    name='password'\r\n                                    control={control}\r\n                                    render={({field}) => (\r\n                                        <InputPasswordToggle className='input-group-merge'\r\n                                                             invalid={errors.password && true} {...field} />\r\n                                    )}\r\n                                />\r\n                            </div>\r\n                            <div className='form-check mb-1'>\r\n                                <Input type='checkbox' id='remember-me'/>\r\n                                <Label className='form-check-label' for='remember-me'>\r\n                                    Remember Me\r\n                                </Label>\r\n                            </div>\r\n                            <Button type='submit' color='primary' block>\r\n                                Sign in\r\n                            </Button>\r\n                        </Form>\r\n                        {/*<p className='text-center mt-2'>*/}\r\n                        {/*    <span className='me-25'>New on our platform?</span>*/}\r\n                        {/*    <Link to='/register'>*/}\r\n                        {/*        <span>Create an account</span>*/}\r\n                        {/*    </Link>*/}\r\n                        {/*</p>*/}\r\n                        {/*<div className='divider my-2'>*/}\r\n                        {/*  <div className='divider-text'>or</div>*/}\r\n                        {/*</div>*/}\r\n                        {/*<div className='auth-footer-btn d-flex justify-content-center'>*/}\r\n                        {/*  <Button color='facebook'>*/}\r\n                        {/*    <Facebook size={14} />*/}\r\n                        {/*  </Button>*/}\r\n                        {/*  <Button color='twitter'>*/}\r\n                        {/*    <Twitter size={14} />*/}\r\n                        {/*  </Button>*/}\r\n                        {/*  <Button color='google'>*/}\r\n                        {/*    <Mail size={14} />*/}\r\n                        {/*  </Button>*/}\r\n                        {/*  <Button className='me-0' color='github'>*/}\r\n                        {/*    <GitHub size={14} />*/}\r\n                        {/*  </Button>*/}\r\n                        {/*</div>*/}\r\n                    </Col>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import axios from 'axios'\r\nimport apiConfig from './apiConfig'\r\nimport * as constants from \"../const/constant\"\r\nimport * as commonFunc from \"../utility/Utils\"\r\n\r\nimport * as authService from \"./auth\"\r\nimport qs from \"qs\"\r\nimport {clearLocalStorage} from \"../utility/Utils\";\r\n\r\nlet body = {}\r\nlet headers\r\n\r\nconst renewTokenHandler = async (apiObject) => {\r\n    let result\r\n    // renew token - start\r\n    const obj = {\r\n        refresh_token: localStorage.getItem(constants.StorageStrings.REFRESH_TOKEN),\r\n        grant_type: 'refresh_token'\r\n    }\r\n    await authService.renewToken(qs.stringify(obj))\r\n        .then(async response => {\r\n            if (response.access_token) {\r\n                Cookies.set(constants.StorageStrings.ACCESS_TOKEN, response.access_token)\r\n                localStorage.setItem(constants.StorageStrings.ACCESS_TOKEN, response.access_token)\r\n                Cookies.set(constants.StorageStrings.REFRESH_TOKEN, response.refresh_token)\r\n                localStorage.setItem(constants.StorageStrings.REFRESH_TOKEN, response.refresh_token)\r\n                // eslint-disable-next-line no-use-before-define\r\n                result = await callApi(apiObject)\r\n            } else {\r\n                await commonFunc.removeCookiesValues()\r\n                await commonFunc.clearLocalStorage()\r\n                window.location.reload()\r\n            }\r\n        })\r\n    // renew token - end\r\n    return result\r\n}\r\n\r\n\r\nexport const callApi = async (apiObject) => {\r\n    const method = apiObject.method ? apiObject.method.toLowerCase() : 'get'\r\n\r\n    if (method === 'post' || method === 'put' || method === 'patch') {\r\n        body = apiObject.body ? apiObject.body : {}\r\n    }\r\n\r\n    headers = {\r\n        'Content-Type': apiObject.urlencoded ? 'application/x-www-form-urlencoded' : apiObject.multipart ? 'multipart/form-data' : 'application/json'\r\n    }\r\n    if (apiObject.authentication) {\r\n        const access_token = localStorage.getItem(constants.StorageStrings.ACCESS_TOKEN)\r\n        if (access_token) {\r\n            headers.Authorization = `Bearer ${access_token}`\r\n        }\r\n    }\r\n    if (apiObject.isBasicAuth) {\r\n        headers.Authorization = 'Basic';\r\n    }\r\n\r\n\r\n    const url = `${apiConfig.serverUrl}/${apiConfig.basePath}/${apiObject.endpoint}`\r\n    let result\r\n\r\n    await axios[method](url, method !== 'get' && method !== 'delete' ? body : {headers}, {headers})\r\n        .then(async response => {\r\n            const code = response.status\r\n\r\n            if (code === 204) {\r\n                result = {\r\n                    data: {},\r\n                    status: null,\r\n                    success: false,\r\n                    message: \"\"\r\n                };\r\n            } else {\r\n                result = {\r\n                    data: response.data === '' ? [] : response.data,\r\n                    status: response.data.message === 'Success' || response.data.message === 'OK' ? 1 : 0,\r\n                    success: response.data.message === 'Success' || response.data.message === 'OK' || response.data.message === undefined,\r\n                    message: response.data.message\r\n                };\r\n            }\r\n        })\r\n        .catch(async error => {\r\n            if (error !== undefined) {\r\n                if (error.response === undefined) {\r\n                    result = await {\r\n                        success: false,\r\n                        status: 0,\r\n                        message: \"Your connection was interrupted\",\r\n                        data: null\r\n                    }\r\n                } else if (error.response.status === 401) {\r\n\r\n                    // if (apiObject.state === \"renewToken\") {\r\n                    //     result = await {success: false, status: 2, message: error.response.data.message};\r\n                    // }\r\n                    // if (apiObject.state === \"login\") {\r\n                    //     result = await {success: false, status: 0, message: error.response.data.message};\r\n                    // }\r\n\r\n                    // result = await renewTokenHandler(apiObject)\r\n\r\n                    result = await {\r\n                        success: false,\r\n                        status: 0,\r\n                        message: error.response.data.message,\r\n                        data: null\r\n                    }\r\n\r\n                    await clearLocalStorage();\r\n                    window.location.reload()\r\n\r\n\r\n                } else if (error.response.status === 403) {\r\n                    result = await {\r\n                        success: false,\r\n                        status: 2,\r\n                        message: \"Access is denied.\",\r\n                        data: null\r\n                    }\r\n                } else if (error.response.status === 417 || error.response.status === 404) {\r\n                    result = await {\r\n                        success: false,\r\n                        status: 0,\r\n                        message: \"Oops! Something went wrong.\",\r\n                        data: null\r\n                    }\r\n                } else if (error.response.data !== undefined) {\r\n                    result = await {\r\n                        success: false,\r\n                        status: 0,\r\n                        message: error.response.data.message,\r\n                        data: null\r\n                    }\r\n                } else {\r\n                    result = await {\r\n                        success: false,\r\n                        status: 2,\r\n                        message: \"Sorry, something went wrong.\",\r\n                        data: null\r\n                    }\r\n                }\r\n            } else {\r\n                result = await {\r\n                    success: false,\r\n                    status: 2,\r\n                    message: \"Your connection was interrupted!\",\r\n                    data: null\r\n                }\r\n            }\r\n        })\r\n\r\n    return result\r\n}\r\n\r\nexport default {callApi, renewTokenHandler}\r\n","export const SERVER_URL = process.env.REACT_APP_SERVER_URL\r\n\r\nconst conf = {\r\n    serverUrl: SERVER_URL,\r\n    basePath: 'api/v1',\r\n    redirect: ``\r\n}\r\n\r\nexport default conf\r\n","// ** React Imports\r\nimport { Fragment, useState, forwardRef } from 'react'\r\n\r\n// ** Third Party Components\r\nimport PropTypes from 'prop-types'\r\nimport classnames from 'classnames'\r\nimport { Eye, EyeOff } from 'react-feather'\r\n\r\n// ** Reactstrap Imports\r\nimport { InputGroup, Input, InputGroupText, Label } from 'reactstrap'\r\n\r\nconst InputPasswordToggle = forwardRef((props, ref) => {\r\n  // ** Props\r\n  const {\r\n    label,\r\n    hideIcon,\r\n    showIcon,\r\n    visible,\r\n    className,\r\n    htmlFor,\r\n    placeholder,\r\n    iconSize,\r\n    inputClassName,\r\n    invalid,\r\n    ...rest\r\n  } = props\r\n\r\n  // ** State\r\n  const [inputVisibility, setInputVisibility] = useState(visible)\r\n\r\n  // ** Renders Icon Based On Visibility\r\n  const renderIcon = () => {\r\n    const size = iconSize ? iconSize : 14\r\n\r\n    if (inputVisibility === false) {\r\n      return hideIcon ? hideIcon : <Eye size={size} />\r\n    } else {\r\n      return showIcon ? showIcon : <EyeOff size={size} />\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      {label ? (\r\n        <Label className='form-label' for={htmlFor}>\r\n          {label}\r\n        </Label>\r\n      ) : null}\r\n      <InputGroup\r\n        className={classnames({\r\n          [className]: className,\r\n          'is-invalid': invalid\r\n        })}\r\n      >\r\n        <Input\r\n          ref={ref}\r\n          invalid={invalid}\r\n          type={inputVisibility === false ? 'password' : 'text'}\r\n          placeholder={placeholder ? placeholder : '············'}\r\n          className={classnames({\r\n            [inputClassName]: inputClassName\r\n          })}\r\n          /*eslint-disable */\r\n          {...(label && htmlFor\r\n            ? {\r\n                id: htmlFor\r\n              }\r\n            : {})}\r\n          {...rest}\r\n          /*eslint-enable */\r\n        />\r\n        <InputGroupText className='cursor-pointer' onClick={() => setInputVisibility(!inputVisibility)}>\r\n          {renderIcon()}\r\n        </InputGroupText>\r\n      </InputGroup>\r\n    </Fragment>\r\n  )\r\n})\r\n\r\nexport default InputPasswordToggle\r\n\r\n// ** PropTypes\r\nInputPasswordToggle.propTypes = {\r\n  invalid: PropTypes.bool,\r\n  hideIcon: PropTypes.node,\r\n  showIcon: PropTypes.node,\r\n  visible: PropTypes.bool,\r\n  className: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  iconSize: PropTypes.number,\r\n  inputClassName: PropTypes.string,\r\n  label(props, propName) {\r\n    // ** If label is defined and htmlFor is undefined throw error\r\n    if (props[propName] && props['htmlFor'] === 'undefined') {\r\n      throw new Error('htmlFor prop is required when label prop is present')\r\n    }\r\n  },\r\n  htmlFor(props, propName) {\r\n    // ** If htmlFor is defined and label is undefined throw error\r\n    if (props[propName] && props['label'] === 'undefined') {\r\n      throw new Error('label prop is required when htmlFor prop is present')\r\n    }\r\n  }\r\n}\r\n\r\n// ** Default Props\r\nInputPasswordToggle.defaultProps = {\r\n  visible: false\r\n}\r\n","import ApiService from './apiServices'\r\n\r\nexport async function renewToken(token) {\r\n    const apiObject = {}\r\n    apiObject.method = 'POST'\r\n    apiObject.authentication = false\r\n    apiObject.isBasicAuth = true\r\n    apiObject.urlencoded = true\r\n    apiObject.endpoint = 'authorize'\r\n    apiObject.body = token\r\n    apiObject.multipart = false\r\n    apiObject.state = \"renewToken\"\r\n    apiObject.grant_type = \"refresh_token\"\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function authUser(userCredentials) {\r\n    const apiObject = {}\r\n    apiObject.method = 'POST'\r\n    apiObject.authentication = false\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = 'login'\r\n    apiObject.body = userCredentials\r\n    apiObject.multipart = false\r\n    apiObject.state = \"login\"\r\n    apiObject.grant_type = \"password\"\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function getUserResources() {\r\n    const apiObject = {}\r\n    apiObject.method = 'GET'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = 'users'\r\n    apiObject.body = null\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function getUserDetails() {\r\n    const apiObject = {}\r\n    apiObject.method = 'GET'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = 'account'\r\n    apiObject.body = null\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function changeUserPassword(body) {\r\n    const apiObject = {}\r\n    apiObject.method = 'POST'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = 'account/change-password'\r\n    apiObject.body = body\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n"],"sourceRoot":""}