{"version":3,"sources":["@core/components/modal/colorsModal/index.js","views/colors/index.js","services/apiServices.js","services/apiConfig.js","services/auth.js","@core/components/modal/index.js","services/machine-resources.js","services/color-resources.js"],"names":["ColorsModal","props","show","toggle","headTitle","isEditMode","tag","className","onSubmit","md","xs","for","name","control","render","field","id","placeholder","value","invalid","errors","colorName","autoComplete","type","color","outline","onClick","prev","CustomHeader","onNameTextChange","onClearNameText","csvList","csvAction","fileName","style","whiteSpace","lg","onChange","length","size","headers","label","key","target","data","asyncOnClick","filename","defaultValues","colorCode","ColorsList","dispatch","useDispatch","useState","val","setVal","sort","setSort","sortColumn","setSortColumn","currentPage","setCurrentPage","statusValue","setStatusValue","rowsPerPage","setRowsPerPage","setShow","setIsEditMode","selectedId","setName","isFetched","setIsFetched","csvData","setCsvData","currentDateTime","setCurrentDateTime","allData","params","page","perPage","q","status","total","store","setStore","useForm","setError","handleSubmit","formState","reset","setValue","getDatass","toggleLoading","ColorsService","then","res","success","content","totalPages","customToastMsg","title","getAllColorsForCsv","a","list","map","item","push","code","searchColors","body","searchValidation","searchColorsForCsv","useEffect","deleted","Object","assign","message","onSearch","searchName","Date","getTime","setTimeout","handleFilter","handlePerPage","e","parseInt","handleStatusValue","getCustomDateTimeStamp","width","marginRight","noHeader","pagination","sortServer","paginationServer","subHeader","columns","center","cell","row","responsive","onSort","column","sortDirection","sortField","filters","isFiltered","keys","some","k","slice","dataToRender","sortIcon","paginationDefaultPage","paginationComponent","nextLabel","breakLabel","previousLabel","pageCount","activeClassName","breakClassName","pageClassName","breakLinkClassName","nextLinkClassName","pageLinkClassName","nextClassName","previousLinkClassName","previousClassName","onPageChange","selected","handlePagination","forcePage","containerClassName","customStyles","display","noDataComponent","emptyUI","conf","serverUrl","process","basePath","redirect","renewTokenHandler","apiObject","obj","refresh_token","localStorage","getItem","constants","REFRESH_TOKEN","grant_type","authService","qs","stringify","response","access_token","Cookies","set","ACCESS_TOKEN","setItem","callApi","result","commonFunc","window","location","reload","method","toLowerCase","urlencoded","multipart","authentication","Authorization","isBasicAuth","url","apiConfig","endpoint","axios","undefined","catch","error","clearLocalStorage","renewToken","token","state","ApiService","authUser","userCredentials","changeUserPassword","ModalComponent","isOpen","children","getMachines","getAllColors","getColorsById","getAllColorsWithPaginate","addColor","updateColor"],"mappings":"qTAsDeA,EAhDK,SAACC,GAEjB,OACI,cAAC,IAAD,CAAOC,KAAMD,EAAMC,KAAMC,OAAQF,EAAME,OAAQC,UAAWH,EAAMI,WAAa,eAAiB,YAA9F,SACI,eAAC,KAAD,CAAKC,IAAI,OAAOC,UAAU,YAAYC,SAAUP,EAAMO,SAAtD,UACI,eAAC,IAAD,CAAKC,GAAI,EAAGC,GAAI,GAAhB,UACI,cAAC,IAAD,CAAOH,UAAU,kBAAkBI,IAAI,YAAvC,wBAGA,cAAC,IAAD,CACIC,KAAK,YACLC,QAASZ,EAAMY,QACfC,OAAQ,gBAAEC,EAAF,EAAEA,MAAF,OACJ,cAAC,IAAD,2BAAWA,GAAX,IAAkBC,GAAG,YAAYC,YAAY,aAAaC,MAAOH,EAAMG,MAChEC,QAASlB,EAAMmB,OAAOC,YAAa,EAAMC,aAAa,YAGpErB,EAAMmB,OAAOC,WAAa,cAAC,IAAD,iDAG/B,eAAC,IAAD,CAAKZ,GAAI,EAAGC,GAAI,GAAhB,UACI,cAAC,IAAD,CAAOH,UAAU,kBAAkBI,IAAI,YAAvC,wBAGA,cAAC,IAAD,CACIC,KAAK,YACLC,QAASZ,EAAMY,QACfC,OAAQ,gBAAEC,EAAF,EAAEA,MAAF,OACJ,cAAC,IAAD,2BAAWA,GAAX,IAAkBC,GAAG,YAAYC,YAAY,aAAaC,MAAOH,EAAMG,MAChEI,aAAa,eAMhC,eAAC,IAAD,CAAKZ,GAAI,GAAIH,UAAU,uCAAvB,UACI,cAAC,IAAD,CAAQgB,KAAK,SAAShB,UAAU,OAAOiB,MAAM,UAA7C,SACKvB,EAAMI,WAAa,SAAW,WAEnC,cAAC,IAAD,CAAQkB,KAAK,QAAQC,MAAM,YAAYC,SAAO,EAACC,QAASzB,EAAME,OAA9D,8B,SCnBhBwB,EAAO,EAELC,EAAe,SAAC,GAUO,IATHC,EASE,EATFA,iBAGAjB,EAME,EANFA,KACAkB,EAKE,EALFA,gBACAC,EAIE,EAJFA,QACAC,EAGE,EAHFA,UACAC,EAEE,EAFFA,SAGtB,OACI,cAAC,IAAD,UACI,sBAAK1B,UAAU,gDAAgD2B,MAAO,CAACC,WAAY,UAAnF,UACI,oBAAI5B,UAAU,iCAAd,oBACA,eAAC,KAAD,WACI,cAAC,IAAD,CAAK6B,GAAG,IAAI7B,UAAU,yCAAtB,SACI,sBAAKA,UAAU,4BAAf,UACI,cAAC,IAAD,CAAOA,UAAU,aAAaI,IAAI,iBAAlC,+BAGA,sBAAKJ,UAAU,kBAAf,UACI,cAAC,IAAD,CACIS,GAAG,OACHT,UAAU,mBACVgB,KAAK,OACLL,MAAON,EACPyB,SAAUR,EACVZ,YAAY,oBACZK,aAAa,QAEA,IAAhBV,EAAK0B,QACF,cAAC,IAAD,CAAGC,KAAM,GACNhC,UAAU,2BACVmB,QAASI,YAOR,IAAnBC,EAAQO,QACL,cAAC,IAAD,CAAKF,GAAG,IAAI7B,UAAU,6DAAtB,SACI,cAAC,UAAD,CACIiC,QAAS,CACL,CAACC,MAAO,aAAcC,IAAK,QAC3B,CAACD,MAAO,aAAcC,IAAK,SAE/BC,OAAO,SACPC,KAAMb,EACNxB,UAAU,kBACVsC,cAAc,EACdnB,QAASM,EACTc,SAAUb,EAVd,mCAwBtBc,EAAgB,CAClB1B,UAAW,GACX2B,UAAW,IAkfAC,UA/eI,WAEf,IAAMC,EAAWC,cAGjB,EAAsBC,mBAAS,IAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAwBF,mBAAS,QAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAoCJ,mBAAS,MAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAAsCN,mBAAS,GAA/C,mBAAOO,EAAP,KAAoBC,EAApB,KACA,EAAsCR,mBAAS,IAA/C,mBAAOS,EAAP,KAAoBC,EAApB,KACA,EAAsCV,mBAAS,IAA/C,mBAAOW,EAAP,KAAoBC,EAApB,KACA,EAAwBZ,oBAAS,GAAjC,mBAAOlD,EAAP,KAAa+D,EAAb,KAEA,EAA8Cb,mBAAS,IAAvD,mBACA,GADA,UACoCA,oBAAS,IAA7C,mBAAO/C,EAAP,KAAmB6D,EAAnB,KACA,GAAoCd,mBAAS,IAA7C,qBAAOe,GAAP,MAEA,IAFA,MAEwBf,mBAAS,KAAjC,qBAAOxC,GAAP,MAAawD,GAAb,MACA,GAAkChB,oBAAS,GAA3C,qBAAOiB,GAAP,MAAkBC,GAAlB,MACA,GAA8BlB,mBAAS,IAAvC,qBAAOmB,GAAP,MAAgBC,GAAhB,MACA,GAA8CpB,mBAAS,IAAvD,qBAAOqB,GAAP,MAAwBC,GAAxB,MAGA,GAA0BtB,mBAAS,CAC/BuB,QAAS,GACT/B,KAAM,GACNgC,OAAQ,CACJC,KAAMlB,EACNmB,QAASf,EACTgB,EAAG1B,EACH2B,OAAQnB,GAEZoB,MAAO,IATX,qBAAOC,GAAP,MAAcC,GAAd,MAaA,GAQIC,YAAQ,CAACrC,kBAPTlC,GADJ,GACIA,QACAwE,GAFJ,GAEIA,SACAC,GAHJ,GAGIA,aACYlE,GAJhB,GAIImE,UAAYnE,OAGZoE,IAPJ,GAMIC,SANJ,GAOID,OAIEE,GAAY,SAACd,GACf1B,EAASyC,eACTC,IAAuChB,EAAOC,MAEzCgB,MAAK,SAAAC,GACEA,EAAIC,QAEJZ,GAAS,CAACR,QAASmB,EAAIlD,KAAKoD,QAASpD,KAAMkD,EAAIlD,KAAKoD,QAASpB,SAAQK,MAAOa,EAAIlD,KAAKqD,aAErFC,YAAeJ,EAAIlD,KAAKuD,MAAOL,EAAId,QAEvC9B,EAASyC,eACTrB,IAAa,OAInB8B,GAAkB,uCAAG,sBAAAC,EAAA,sEACjBT,MACDC,MAAK,SAAAC,GACF,GAAIA,EAAIC,QAAS,CACb,IAAMO,EAAO,GACbR,EAAIlD,KAAK2D,KAAI,SAACC,GACVF,EAAKG,KAAK,CACN7F,KAAM4F,EAAK5F,KACX8F,KAAMF,EAAKE,UAGnBlC,GAAW8B,OAXA,2CAAH,qDAgBlBK,GAAY,uCAAG,WAAO/B,GAAP,eAAAyB,EAAA,6DACXO,EAAO,CAEThG,KAAMiG,YAAiBjC,EAAOhE,OAElCsC,EAASyC,eALQ,SAMXC,IAA2BgB,EAAMhC,EAAOC,MACzCgB,MAAK,SAAAC,GACEA,EAAIC,QACJZ,GAAS,CAACR,QAASmB,EAAIlD,KAAKoD,QAASpD,KAAMkD,EAAIlD,KAAKoD,QAASpB,SAAQK,MAAOa,EAAIlD,KAAKqD,aAErFC,YAAeJ,EAAIlD,KAAKuD,MAAOL,EAAId,QAEvC9B,EAASyC,kBAbA,2CAAH,sDAiBZmB,GAAkB,uCAAG,WAAOlC,GAAP,eAAAyB,EAAA,6DACjBO,EAAO,CACThG,KAAMiG,YAAiBjC,EAAOhE,OAElCsC,EAASyC,eAJc,SAKjBC,IAAiCgB,EAAMhC,EAAOC,MAC/CgB,MAAK,SAAAC,GACF,GAAIA,EAAIC,QAAS,CACb,IAAMO,EAAO,GACbR,EAAIlD,KAAKoD,QAAQO,KAAI,SAAAC,GACjBF,EAAKG,KAAK,CACN7F,KAAM4F,EAAK5F,KACX8F,KAAMF,EAAKE,UAGnBlC,GAAW8B,OAfA,2CAAH,sDAoBxBS,oBAAS,sBAAC,sBAAAV,EAAA,6DACNX,GAAU,CACNnC,OACAwB,EAAG1B,EACHI,aACAoB,KAAMlB,EACNmB,QAASf,EACTiB,OAAQnB,IAPN,SASAuC,KATA,2CAUP,IAEH,IAwHM5F,GAAQ,uCAAG,WAAMoC,GAAN,iBAAAyD,EAAA,0DAETzD,EAAI,UAFK,oBAGHgE,EAAO,CACThG,KAAMgC,EAAKvB,UACXqF,KAAM9D,EAAKI,UACXgE,SAAS,GAEb9D,EAASyC,gBACLtF,EATK,uBAUL4G,OAAOC,OAAON,EAAM,CAChB5F,GAAImD,KAXH,SAcCyB,IAA0BgB,EAAMzC,IACjC0B,MAAK,SAAAC,GACEA,EAAIC,SACJG,YAAe,6BAA8BJ,EAAId,QACjDf,GAAQ,GAERyB,GAAU,CACNnC,OACAwB,EAAG1B,EACHI,aACAoB,KAAMlB,EAAc,EACpBmB,QAASf,EACTiB,OAAQnB,KAGZqC,YAAeJ,EAAIqB,QAASrB,EAAId,QAEpC9B,EAASyC,kBA/BZ,+CAkCCC,IAAuBgB,GACxBf,MAAK,SAAAC,GACEA,EAAIC,SACJG,YAAe,4BAA6BJ,EAAId,QAChDf,GAAQ,GACRL,EAAe,GACf8B,GAAU,CACNnC,OACAwB,EAAG1B,EACHI,aACAoB,KAAM,EACNC,QAASf,EACTiB,OAAQnB,KAGZqC,YAAeJ,EAAIqB,QAASrB,EAAId,QAEpC9B,EAASyC,kBAnDZ,gCAwDT,IAAWjD,KAAOE,EACW,IAArBA,EAAKF,GAAKJ,QACV+C,GAAS3C,EAAK,CACVnB,KAAM,aA3DT,4CAAH,sDA0HR6F,GAAW,SAAClG,EAAOK,GAErB,IAAI8F,EAAazG,GAEjB,GACS,SADDW,EAEA6C,GAAQlD,GACRmG,EAAanG,EAMrBS,GAAO,IAAI2F,MAAOC,UAClB3D,EAAe,GAEf4D,YAAW,YACK,IAAIF,MAAOC,UACb5F,GAAQ,MACY,IAAtB0F,EAAW/E,QACXoD,GAAU,CACNnC,OACAwB,EAAG1B,EACHI,aACAoB,KAAM,EACNC,QAAS,EACTE,OAAQnB,EAERjD,KAAMyG,IAEVjB,OAEAO,GAAa,CACTpD,OACAwB,EAAG1B,EACHI,aACAoB,KAAM,EACNC,QAAS,EACTE,OAAQnB,EAERjD,KAAMyG,IAEVP,GAAmB,CACflG,KAAMyG,QAInB,MAIP,OACI,eAAC,WAAD,WACI,sBAAK9G,UAAU,GAAf,UACI,cAAC,EAAD,CACIW,MAAOmC,EACPQ,YAAaA,EACbE,YAAaA,EACb0D,aA5SK,SAAApE,GACjBC,EAAOD,GACPqC,GAAU,CACNnC,OACAwB,EAAG1B,EACHI,aACAoB,KAAMlB,EACNmB,QAASf,EACTiB,OAAQnB,KAqSA6D,cAjSM,SAAAC,GAClBjC,GAAU,CACNnC,OACAwB,EAAG1B,EACHI,aACAoB,KAAMlB,EACNqB,OAAQnB,EACRiB,QAAS8C,SAASD,EAAEhF,OAAOzB,SAE/B8C,EAAe4D,SAASD,EAAEhF,OAAOzB,SAyRrB2G,kBAtRU,SAAAF,GACtB7D,EAAe6D,EAAEhF,OAAOzB,OACxBwE,GAAU,CACNnC,OACAwB,EAAG1B,EACHI,aACAoB,KAAMlB,EACNmB,QAASf,EACTiB,OAAQ2C,EAAEhF,OAAOzB,SA+QTW,iBAAkB,SAAA8F,GAAC,OAAIP,GAASO,EAAEhF,OAAOzB,MAAO,SAChDN,KAAMA,GACNkB,gBAAiB,kBAAMsF,GAAS,GAAI,SACpCrF,QAASwC,GACTvC,UAAW,kBAAM0C,GAAmBoD,MACpC7F,SAAQ,uBAAkBwC,GAAlB,UAEZ,cAAC,IAAD,CACIrC,GAAG,IACH7B,UAAU,+EAFd,SAII,eAAC,IAAD,CAAQmB,QAAS,WArF7B8D,KACAtB,GAAc,GACdD,GAAQ,IAqFO/B,MAAO,CAAC6F,MAAO,KAFlB,UAGI,cAAC,IAAD,CAAMxF,KAAM,GAAIL,MAAO,CAAC8F,YAAa,KAHzC,WAOJ,eAAC,KAAD,CAAKzH,UAAU,OAAf,UACI,cAAC,IAAD,CAAK6B,GAAG,MACR,cAAC,IAAD,CAAKA,GAAG,IAAR,SACI,cAAC,IAAD,UACI,qBAAK7B,UAAU,yCAAf,SACI,cAAC,IAAD,CACI0H,UAAU,EACVC,YAAU,EACVC,YAAU,EACVC,kBAAgB,EAChBC,WAAW,EACXC,QAxIhB,CACZ,CACI1H,KAAM,aACNmH,MAAO,MACPQ,QAAQ,EACRC,KAAM,SAAAC,GAAG,OAAIA,EAAI7H,OAErB,CACImH,MAAO,MACPnH,KAAM,aACN2H,QAAQ,EACRC,KAAM,SAAAC,GAAG,OAAIA,EAAI/B,QA8HOgC,YAAY,EACZC,OArOb,SAACC,EAAQC,GACxBrF,EAAQqF,GACRnF,EAAckF,EAAOE,WACrB5F,EACIwC,GAAU,CACNX,EAAG1B,EACHwB,KAAMlB,EACNJ,KAAMsF,EACN7D,OAAQnB,EACRiB,QAASf,EACTN,WAAYmF,EAAOE,cA4NClG,KAzPX,WAAO,IAAD,IACjBmG,EAAU,CACZhE,EAAG1B,EACH2B,OAAQnB,GAGNmF,EAAa/B,OAAOgC,KAAKF,GAASG,MAAK,SAAUC,GACnD,OAAOJ,EAAQI,GAAG7G,OAAS,KAG/B,OAAI,UAAA4C,GAAMtC,YAAN,eAAYN,QAAS,EACd4C,GAAMtC,KACiB,KAAvB,UAAAsC,GAAMtC,YAAN,eAAYN,SAAgB0G,EAC5B,GAEA9D,GAAMP,QAAQyE,MAAM,EAAGrF,GA0OAsF,GACNC,SAAU,cAAC,IAAD,IACV/I,UAAU,qBACVgJ,sBAAuB5F,EACvB6F,oBArRP,WAErB,OACI,cAAC,IAAD,CACIC,UAAU,GACVC,WAAW,MACXC,cAAc,GACdC,UAAW1E,GAAMD,OAAS,EAC1B4E,gBAAgB,SAChBC,eAAe,YACfC,cAAe,YACfC,mBAAmB,YACnBC,kBAAmB,YACnBC,kBAAmB,YACnBC,cAAe,iBACfC,sBAAuB,YACvBC,kBAAmB,iBACnBC,aAAc,SAAAzF,GAAI,OA3CL,SAAAA,GACD,IAAhBjE,GAAK0B,OACLoD,GAAU,CACNnC,OACAwB,EAAG1B,EACHI,aACAuB,OAAQnB,EACRiB,QAASf,EACTc,KAAMA,EAAK0F,WAGf5D,GAAa,CACTpD,OACAwB,EAAG1B,EACHI,aACAoB,KAAMA,EAAK0F,SACXzF,QAASD,EAAK0F,SACdvF,OAAQnB,EAERjD,UAIRgD,EAAeiB,EAAK0F,SAAW,GAoBDC,CAAiB3F,IACvC4F,UAA2B,IAAhB9G,EAAoBA,EAAc,EAAI,EACjD+G,mBAAoB,uDAmQAC,aA1GX,CACjBtC,UAAW,CACPnG,MAAO,CACH0I,QAAS,UAwGWC,gBAAiBC,YAAQzG,YAOzC,cAAC,IAAD,CAAKjC,GAAG,YAIhB,cAAC,EAAD,CACIlC,KAAMA,EACNC,OAAQ,WACJ8D,GAAS/D,GACTsF,MAEJhF,SAAU8E,GAAa9E,IACvBK,QAASA,GACTO,OAAQA,GACRf,WAAYA,S,qCCnkBxBmC,E,uCCFWuI,EANF,CACTC,UAHsBC,uBAItBC,SAAU,SACVC,SAAS,I,6CDITvE,EAAO,GAGLwE,EAAiB,uCAAG,WAAOC,GAAP,iBAAAhF,EAAA,6DAGhBiF,EAAM,CACRC,cAAeC,aAAaC,QAAQC,IAAyBC,eAC7DC,WAAY,iBALM,SAOhBC,IAAuBC,IAAGC,UAAUT,IACrCzF,KADC,+BAAAQ,EAAA,MACI,WAAM2F,GAAN,SAAA3F,EAAA,0DACE2F,EAASC,aADX,wBAEEC,QAAQC,IAAIT,IAAyBU,aAAcJ,EAASC,cAC5DT,aAAaa,QAAQX,IAAyBU,aAAcJ,EAASC,cACrEC,QAAQC,IAAIT,IAAyBC,cAAeK,EAAST,eAC7DC,aAAaa,QAAQX,IAAyBC,cAAeK,EAAST,eALxE,SAOiBe,EAAQjB,GAPzB,OAOEkB,EAPF,gDASQC,MATR,yBAUQA,MAVR,QAWEC,OAAOC,SAASC,SAXlB,4CADJ,uDAPgB,gCAuBfJ,GAvBe,2CAAH,sDA2BVD,EAAO,uCAAG,WAAOjB,GAAP,qBAAAhF,EAAA,4DAGJ,UAFTuG,EAASvB,EAAUuB,OAASvB,EAAUuB,OAAOC,cAAgB,QAE/B,QAAXD,GAA+B,UAAXA,IACzChG,EAAOyE,EAAUzE,KAAOyE,EAAUzE,KAAO,IAG7CpE,EAAU,CACN,eAAgB6I,EAAUyB,WAAa,oCAAsCzB,EAAU0B,UAAY,sBAAwB,oBAE3H1B,EAAU2B,iBACJf,EAAeT,aAAaC,QAAQC,IAAyBU,iBAE/D5J,EAAQyK,cAAR,iBAAkChB,IAGtCZ,EAAU6B,cACV1K,EAAQyK,cAAgB,SAItBE,EArBa,UAqBJC,EAAUpC,UArBN,YAqBmBoC,EAAUlC,SArB7B,YAqByCG,EAAUgC,UArBnD,SAwBbC,IAAMV,GAAQO,EAAgB,QAAXP,GAA+B,WAAXA,EAAsBhG,EAAO,CAACpE,WAAU,CAACA,YACjFqD,KADC,+BAAAQ,EAAA,MACI,WAAM2F,GAAN,eAAA3F,EAAA,sDACIK,EAAOsF,EAAShH,OAGlBuH,EADS,MAAT7F,EACS,CACL9D,KAAM,GACNoC,OAAQ,KACRe,SAAS,EACToB,QAAS,IAGJ,CACLvE,KAAwB,KAAlBoJ,EAASpJ,KAAc,GAAKoJ,EAASpJ,KAC3CoC,OAAkC,YAA1BgH,EAASpJ,KAAKuE,SAAmD,OAA1B6E,EAASpJ,KAAKuE,QAAmB,EAAI,EACpFpB,QAAmC,YAA1BiG,EAASpJ,KAAKuE,SAAmD,OAA1B6E,EAASpJ,KAAKuE,cAA8CoG,IAA1BvB,EAASpJ,KAAKuE,QAChGA,QAAS6E,EAASpJ,KAAKuE,SAf7B,2CADJ,uDAoBDqG,MApBC,+BAAAnH,EAAA,MAoBK,WAAMoH,GAAN,SAAApH,EAAA,8DACWkH,IAAVE,EADD,yBAEwBF,IAAnBE,EAAMzB,SAFX,gCAGoB,CACXjG,SAAS,EACTf,OAAQ,EACRmC,QAAS,kCACTvE,KAAM,MAPf,OAGK2J,EAHL,iCASsC,MAA1BkB,EAAMzB,SAAShH,OAT3B,kCAoBoB,CACXe,SAAS,EACTf,OAAQ,EACRmC,QAASsG,EAAMzB,SAASpJ,KAAKuE,QAC7BvE,KAAM,MAxBf,eAoBK2J,EApBL,iBA2BWmB,cA3BX,QA4BKjB,OAAOC,SAASC,SA5BrB,2BA+BsC,MAA1Bc,EAAMzB,SAAShH,OA/B3B,kCAgCoB,CACXe,SAAS,EACTf,OAAQ,EACRmC,QAAS,oBACTvE,KAAM,MApCf,QAgCK2J,EAhCL,kCAsCsC,MAA1BkB,EAAMzB,SAAShH,QAA4C,MAA1ByI,EAAMzB,SAAShH,OAtC5D,kCAuCoB,CACXe,SAAS,EACTf,OAAQ,EACRmC,QAAS,8BACTvE,KAAM,MA3Cf,QAuCK2J,EAvCL,uCA6CoCgB,IAAxBE,EAAMzB,SAASpJ,KA7C3B,kCA8CoB,CACXmD,SAAS,EACTf,OAAQ,EACRmC,QAASsG,EAAMzB,SAASpJ,KAAKuE,QAC7BvE,KAAM,MAlDf,QA8CK2J,EA9CL,gDAqDoB,CACXxG,SAAS,EACTf,OAAQ,EACRmC,QAAS,+BACTvE,KAAM,MAzDf,QAqDK2J,EArDL,wDA6DgB,CACXxG,SAAS,EACTf,OAAQ,EACRmC,QAAS,mCACTvE,KAAM,MAjEX,QA6DC2J,EA7DD,mDApBL,uDAxBa,gCAkHZA,GAlHY,2CAAH,sDAqHL,KAACD,UAASlB,sB,2KE1JlB,SAAeuC,EAAtB,kC,4CAAO,WAA0BC,GAA1B,eAAAvH,EAAA,6DACGgF,EAAY,IACRuB,OAAS,OACnBvB,EAAU2B,gBAAiB,EAC3B3B,EAAU6B,aAAc,EACxB7B,EAAUyB,YAAa,EACvBzB,EAAUgC,SAAW,YACrBhC,EAAUzE,KAAOgH,EACjBvC,EAAU0B,WAAY,EACtB1B,EAAUwC,MAAQ,aAClBxC,EAAUO,WAAa,gBAVpB,UAYUkC,IAAWxB,QAAQjB,GAZ7B,sF,sBAeA,SAAe0C,EAAtB,kC,4CAAO,WAAwBC,GAAxB,eAAA3H,EAAA,6DACGgF,EAAY,IACRuB,OAAS,OACnBvB,EAAU2B,gBAAiB,EAC3B3B,EAAU6B,aAAc,EACxB7B,EAAUyB,YAAa,EACvBzB,EAAUgC,SAAW,QACrBhC,EAAUzE,KAAOoH,EACjB3C,EAAU0B,WAAY,EACtB1B,EAAUwC,MAAQ,QAClBxC,EAAUO,WAAa,WAVpB,UAYUkC,IAAWxB,QAAQjB,GAZ7B,sF,sBAyCA,SAAe4C,EAAtB,kC,4CAAO,WAAkCrH,GAAlC,eAAAP,EAAA,6DACGgF,EAAY,IACRuB,OAAS,OACnBvB,EAAU2B,gBAAiB,EAC3B3B,EAAU6B,aAAc,EACxB7B,EAAUyB,YAAa,EACvBzB,EAAUgC,SAAW,0BACrBhC,EAAUzE,KAAOA,EACjByE,EAAU0B,WAAY,EARnB,UAUUe,IAAWxB,QAAQjB,GAV7B,sF,+EC1DP,yBAee6C,IAZQ,SAACjO,GACpB,OACI,eAAC,IAAD,CAAOkO,OAAQlO,EAAMC,KAAMC,OAAQF,EAAME,OAClCI,UAAS,sCAAiCN,EAAMsC,KAAOtC,EAAMsC,KAAO,MAD3E,UAEI,cAAC,IAAD,CAAapC,OAAQF,EAAME,OAA3B,SAAoCF,EAAMG,YAC1C,cAAC,IAAD,CAAWG,UAAU,qBAArB,SACKN,EAAMmO,gB,2HCMhB,SAAeC,IAAtB,+B,4CAAO,4BAAAhI,EAAA,6DACGgF,EAAY,IACRuB,OAAS,MACnBvB,EAAU2B,gBAAiB,EAC3B3B,EAAU6B,aAAc,EACxB7B,EAAUyB,YAAa,EACvBzB,EAAUgC,SAAV,gBACAhC,EAAUzE,KAAO,KACjByE,EAAU0B,WAAY,EARnB,UAUUe,IAAWxB,QAAQjB,GAV7B,sF,2UCbA,SAAeiD,IAAtB,+B,4CAAO,4BAAAjI,EAAA,6DACGgF,EAAY,IACRuB,OAAS,MACnBvB,EAAU2B,gBAAiB,EAC3B3B,EAAU6B,aAAc,EACxB7B,EAAUyB,YAAa,EACvBzB,EAAUgC,SAAV,aACAhC,EAAUzE,KAAO,KACjByE,EAAU0B,WAAY,EARnB,UAUUe,IAAWxB,QAAQjB,GAV7B,sF,sBAaA,SAAekD,EAAtB,kC,4CAAO,WAA6BvN,GAA7B,eAAAqF,EAAA,6DACGgF,EAAY,IACRuB,OAAS,MACnBvB,EAAU2B,gBAAiB,EAC3B3B,EAAU6B,aAAc,EACxB7B,EAAUyB,YAAa,EACvBzB,EAAUgC,SAAV,8BAA4CrM,GAC5CqK,EAAUzE,KAAO,KACjByE,EAAU0B,WAAY,EARnB,UAUUe,IAAWxB,QAAQjB,GAV7B,sF,sBAaA,SAAemD,EAAtB,kC,4CAAO,WAAwC3J,GAAxC,eAAAwB,EAAA,6DACGgF,EAAY,IACRuB,OAAS,MACnBvB,EAAU2B,gBAAiB,EAC3B3B,EAAU6B,aAAc,EACxB7B,EAAUyB,YAAa,EACvBzB,EAAUgC,SAAV,sBAAoCxI,EAApC,0BACAwG,EAAUzE,KAAO,KACjByE,EAAU0B,WAAY,EARnB,UAUUe,IAAWxB,QAAQjB,GAV7B,sF,sBAaA,SAAeoD,EAAtB,kC,4CAAO,WAAwB7H,GAAxB,eAAAP,EAAA,6DACGgF,EAAY,IACRuB,OAAS,OACnBvB,EAAU2B,gBAAiB,EAC3B3B,EAAU6B,aAAc,EACxB7B,EAAUyB,YAAa,EACvBzB,EAAUgC,SAAV,SACAhC,EAAUzE,KAAOA,EACjByE,EAAU0B,WAAY,EARnB,UAUUe,IAAWxB,QAAQjB,GAV7B,sF,sBAaA,SAAeqD,EAAtB,oC,4CAAO,WAA2B9H,EAAM5F,GAAjC,eAAAqF,EAAA,6DACGgF,EAAY,IACRuB,OAAS,MACnBvB,EAAU2B,gBAAiB,EAC3B3B,EAAU6B,aAAc,EACxB7B,EAAUyB,YAAa,EACvBzB,EAAUgC,SAAV,iBAA+BrM,GAC/BqK,EAAUzE,KAAOA,EACjByE,EAAU0B,WAAY,EARnB,UAUUe,IAAWxB,QAAQjB,GAV7B,sF,sBAaA,SAAe1E,EAAtB,oC,4CAAO,WAA4BC,EAAM/B,GAAlC,eAAAwB,EAAA,6DACGgF,EAAY,IACRuB,OAAS,OACnBvB,EAAU2B,gBAAiB,EAC3B3B,EAAU6B,aAAc,EACxB7B,EAAUyB,YAAa,EACvBzB,EAAUgC,SAAV,6BAA2CxI,EAA3C,YACAwG,EAAUzE,KAAOA,EACjByE,EAAU0B,WAAY,EARnB,UAUUe,IAAWxB,QAAQjB,GAV7B,sF,sBAaA,SAAevE,EAAtB,kC,4CAAO,WAAkCF,GAAlC,eAAAP,EAAA,6DACGgF,EAAY,IACRuB,OAAS,OACnBvB,EAAU2B,gBAAiB,EAC3B3B,EAAU6B,aAAc,EACxB7B,EAAUyB,YAAa,EACvBzB,EAAUgC,SAAV,8BACAhC,EAAUzE,KAAOA,EACjByE,EAAU0B,WAAY,EARnB,UAUUe,IAAWxB,QAAQjB,GAV7B,sF","file":"static/js/53.19ad8cc5.chunk.js","sourcesContent":["import React from \"react\"\r\nimport Modal from \"../index\"\r\nimport {Button, Col, FormFeedback, Input, Label, Row} from \"reactstrap\"\r\nimport {Controller} from \"react-hook-form\"\r\n\r\n\r\nconst ColorsModal = (props) => {\r\n\r\n    return (\r\n        <Modal show={props.show} toggle={props.toggle} headTitle={props.isEditMode ? \"Update Color\" : \"Add Color\"}>\r\n            <Row tag='form' className='gy-1 pt-2' onSubmit={props.onSubmit}>\r\n                <Col md={6} xs={12}>\r\n                    <Label className='form-label mb-1' for='colorName'>\r\n                        Color Name\r\n                    </Label>\r\n                    <Controller\r\n                        name='colorName'\r\n                        control={props.control}\r\n                        render={({field}) => (\r\n                            <Input {...field} id='colorName' placeholder='Color Name' value={field.value}\r\n                                   invalid={props.errors.colorName && true} autoComplete=\"off\"/>\r\n                        )}\r\n                    />\r\n                    {props.errors.colorName && <FormFeedback>Please enter a valid color name</FormFeedback>}\r\n                </Col>\r\n\r\n                <Col md={6} xs={12}>\r\n                    <Label className='form-label mb-1' for='colorCode'>\r\n                        Color Code\r\n                    </Label>\r\n                    <Controller\r\n                        name='colorCode'\r\n                        control={props.control}\r\n                        render={({field}) => (\r\n                            <Input {...field} id='colorCode' placeholder='Color Code' value={field.value}\r\n                                   autoComplete=\"off\"/>\r\n                        )}\r\n                    />\r\n                    {/* {props.errors.colorCode && <FormFeedback>Please enter a valid color code</FormFeedback>} */}\r\n                </Col>\r\n\r\n                <Col xs={12} className='d-flex justify-content-end mt-2 pt-5'>\r\n                    <Button type='submit' className='me-1' color='success'>\r\n                        {props.isEditMode ? 'Update' : 'Submit'}\r\n                    </Button>\r\n                    <Button type='reset' color='secondary' outline onClick={props.toggle}>\r\n                        Discard\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ColorsModal\r\n","// ** React Imports\r\nimport {Link} from 'react-router-dom'\r\nimport React, {useState, useEffect, Fragment} from 'react'\r\n\r\n// ** Third Party Components\r\nimport ReactPaginate from 'react-paginate'\r\nimport {Calendar, ChevronDown, Edit3, Eye, Home, Plus, Sliders, X} from 'react-feather'\r\nimport DataTable from 'react-data-table-component'\r\nimport {toggleLoading} from '@store/loading'\r\n\r\n// ** Reactstrap Imports\r\nimport {Button, Input, Row, Col, Card, Label, CardHeader, CardTitle, CardBody, CardSubtitle} from 'reactstrap'\r\n\r\nimport {useDispatch} from 'react-redux'\r\n\r\n\r\n// ** Styles\r\nimport '@styles/react/apps/app-invoice.scss'\r\n\r\nimport * as MachineService from \"../../services/machine-resources\"\r\nimport * as ColorsService from \"../../services/color-resources\"\r\nimport {customToastMsg, emptyUI, getCustomDateTimeStamp, searchValidation} from \"../../utility/Utils\"\r\nimport {useForm} from \"react-hook-form\"\r\nimport ColorsModal from \"../../@core/components/modal/colorsModal\"\r\nimport {CSVLink} from \"react-csv\"\r\n\r\nlet prev = 0\r\n\r\nconst CustomHeader = ({\r\n                          onNameTextChange,\r\n                          // onKnittingTextChange,\r\n                          //   knittingDiameter\r\n                          name,\r\n                          onClearNameText,\r\n                          csvList,\r\n                          csvAction,\r\n                          fileName\r\n                          // onClearKnittingText\r\n                      }) => {\r\n    return (\r\n        <Card>\r\n            <div className='invoice-list-table-header w-100 py-2 px-1 m-0' style={{whiteSpace: 'nowrap'}}>\r\n                <h3 className='text-primary invoice-logo mb-2'>Colors</h3>\r\n                <Row>\r\n                    <Col lg='5' className='d-flex align-items-center px-0 px-lg-1'>\r\n                        <div className='d-flex align-items-center'>\r\n                            <Label className='form-label' for='default-picker'>\r\n                                Search Color Name\r\n                            </Label>\r\n                            <div className='inputWithButton'>\r\n                                <Input\r\n                                    id='name'\r\n                                    className='ms-50 me-2 w-100'\r\n                                    type='text'\r\n                                    value={name}\r\n                                    onChange={onNameTextChange}\r\n                                    placeholder='Search Color Name'\r\n                                    autoComplete=\"off\"\r\n                                />\r\n                                {name.length !== 0 && (\r\n                                    <X size={18}\r\n                                       className='cursor-pointer close-btn'\r\n                                       onClick={onClearNameText}\r\n                                    />\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    </Col>\r\n\r\n                    {csvList.length !== 0 && (\r\n                        <Col lg='7' className='d-flex align-items-center px-0 px-lg-1 justify-content-end'>\r\n                            <CSVLink\r\n                                headers={[\r\n                                    {label: \"Color Name\", key: \"name\"},\r\n                                    {label: \"Color Code\", key: \"code\"}\r\n                                ]}\r\n                                target=\"_blank\"\r\n                                data={csvList}\r\n                                className=\"btn btn-primary\"\r\n                                asyncOnClick={true}\r\n                                onClick={csvAction}\r\n                                filename={fileName}\r\n                            >\r\n                                Export CSV\r\n                            </CSVLink>\r\n                        </Col>\r\n                    )}\r\n\r\n                </Row>\r\n            </div>\r\n        </Card>\r\n\r\n    )\r\n}\r\n\r\nconst defaultValues = {\r\n    colorName: '',\r\n    colorCode: ''\r\n}\r\n\r\nconst ColorsList = () => {\r\n    // ** Store vars\r\n    const dispatch = useDispatch()\r\n\r\n    // ** States\r\n    const [val, setVal] = useState('')\r\n    const [sort, setSort] = useState('desc')\r\n    const [sortColumn, setSortColumn] = useState('id')\r\n    const [currentPage, setCurrentPage] = useState(0)\r\n    const [statusValue, setStatusValue] = useState('')\r\n    const [rowsPerPage, setRowsPerPage] = useState(10)\r\n    const [show, setShow] = useState(false)\r\n    // eslint-disable-next-line no-unused-vars\r\n    const [knittingDiaData, setKnittingDiaData] = useState([])\r\n    const [isEditMode, setIsEditMode] = useState(false)\r\n    const [selectedId, setSelectedId] = useState('')\r\n    // const [knittingDiameter, setKnittingDiameter] = useState('')\r\n    const [name, setName] = useState('')\r\n    const [isFetched, setIsFetched] = useState(false)\r\n    const [csvData, setCsvData] = useState([])\r\n    const [currentDateTime, setCurrentDateTime] = useState('')\r\n\r\n    // eslint-disable-next-line no-unused-vars\r\n    const [store, setStore] = useState({\r\n        allData: [],\r\n        data: [],\r\n        params: {\r\n            page: currentPage,\r\n            perPage: rowsPerPage,\r\n            q: val,\r\n            status: statusValue\r\n        },\r\n        total: 0\r\n    })\r\n\r\n    // ** Hooks\r\n    const {\r\n        control,\r\n        setError,\r\n        handleSubmit,\r\n        formState: {errors},\r\n        // eslint-disable-next-line no-unused-vars\r\n        setValue,\r\n        reset\r\n    } = useForm({defaultValues})\r\n\r\n\r\n    const getDatass = (params) => {\r\n        dispatch(toggleLoading())\r\n        ColorsService.getAllColorsWithPaginate(params.page)\r\n            // eslint-disable-next-line no-unused-vars\r\n            .then(res => {\r\n                if (res.success) {\r\n                    // console.log(res.data.content)\r\n                    setStore({allData: res.data.content, data: res.data.content, params, total: res.data.totalPages})\r\n                } else {\r\n                    customToastMsg(res.data.title, res.status)\r\n                }\r\n                dispatch(toggleLoading())\r\n                setIsFetched(true)\r\n            })\r\n    }\r\n\r\n    const getAllColorsForCsv = async () => {\r\n        await ColorsService.getAllColors()\r\n            .then(res => {\r\n                if (res.success) {\r\n                    const list = []\r\n                    res.data.map((item) => {\r\n                        list.push({\r\n                            name: item.name,\r\n                            code: item.code\r\n                        })\r\n                    })\r\n                    setCsvData(list)\r\n                }\r\n            })\r\n    }\r\n\r\n    const searchColors = async (params) => {\r\n        const body = {\r\n            // knittingDiameter: searchValidation(params.knittingDiameter),\r\n            name: searchValidation(params.name)\r\n        }\r\n        dispatch(toggleLoading())\r\n        await ColorsService.searchColors(body, params.page)\r\n            .then(res => {\r\n                if (res.success) {\r\n                    setStore({allData: res.data.content, data: res.data.content, params, total: res.data.totalPages})\r\n                } else {\r\n                    customToastMsg(res.data.title, res.status)\r\n                }\r\n                dispatch(toggleLoading())\r\n            })\r\n    }\r\n\r\n    const searchColorsForCsv = async (params) => {\r\n        const body = {\r\n            name: searchValidation(params.name)\r\n        }\r\n        dispatch(toggleLoading())\r\n        await ColorsService.searchColorsForCsv(body, params.page)\r\n            .then(res => {\r\n                if (res.success) {\r\n                    const list = []\r\n                    res.data.content.map(item => {\r\n                        list.push({\r\n                            name: item.name,\r\n                            code: item.code\r\n                        })\r\n                    })\r\n                    setCsvData(list)\r\n                }\r\n            })\r\n    }\r\n\r\n    useEffect(async () => {\r\n        getDatass({\r\n            sort,\r\n            q: val,\r\n            sortColumn,\r\n            page: currentPage,\r\n            perPage: rowsPerPage,\r\n            status: statusValue\r\n        })\r\n        await getAllColorsForCsv()\r\n    }, [])\r\n\r\n    const handleFilter = val => {\r\n        setVal(val)\r\n        getDatass({\r\n            sort,\r\n            q: val,\r\n            sortColumn,\r\n            page: currentPage,\r\n            perPage: rowsPerPage,\r\n            status: statusValue\r\n        })\r\n    }\r\n\r\n    const handlePerPage = e => {\r\n        getDatass({\r\n            sort,\r\n            q: val,\r\n            sortColumn,\r\n            page: currentPage,\r\n            status: statusValue,\r\n            perPage: parseInt(e.target.value)\r\n        })\r\n        setRowsPerPage(parseInt(e.target.value))\r\n    }\r\n\r\n    const handleStatusValue = e => {\r\n        setStatusValue(e.target.value)\r\n        getDatass({\r\n            sort,\r\n            q: val,\r\n            sortColumn,\r\n            page: currentPage,\r\n            perPage: rowsPerPage,\r\n            status: e.target.value\r\n        })\r\n    }\r\n\r\n    const handlePagination = page => {\r\n        if (name.length === 0) {\r\n            getDatass({\r\n                sort,\r\n                q: val,\r\n                sortColumn,\r\n                status: statusValue,\r\n                perPage: rowsPerPage,\r\n                page: page.selected\r\n            })\r\n        } else {\r\n            searchColors({\r\n                sort,\r\n                q: val,\r\n                sortColumn,\r\n                page: page.selected,\r\n                perPage: page.selected,\r\n                status: statusValue,\r\n                // knittingDiameter,\r\n                name\r\n            })\r\n        }\r\n\r\n        setCurrentPage(page.selected + 1)\r\n    }\r\n\r\n    const CustomPagination = () => {\r\n\r\n        return (\r\n            <ReactPaginate\r\n                nextLabel=''\r\n                breakLabel='...'\r\n                previousLabel=''\r\n                pageCount={store.total || 1}\r\n                activeClassName='active'\r\n                breakClassName='page-item'\r\n                pageClassName={'page-item'}\r\n                breakLinkClassName='page-link'\r\n                nextLinkClassName={'page-link'}\r\n                pageLinkClassName={'page-link'}\r\n                nextClassName={'page-item next'}\r\n                previousLinkClassName={'page-link'}\r\n                previousClassName={'page-item prev'}\r\n                onPageChange={page => handlePagination(page)}\r\n                forcePage={currentPage !== 0 ? currentPage - 1 : 0}\r\n                containerClassName={'pagination react-paginate justify-content-end p-1'}\r\n            />\r\n        )\r\n    }\r\n\r\n    const dataToRender = () => {\r\n        const filters = {\r\n            q: val,\r\n            status: statusValue\r\n        }\r\n\r\n        const isFiltered = Object.keys(filters).some(function (k) {\r\n            return filters[k].length > 0\r\n        })\r\n\r\n        if (store.data?.length > 0) {\r\n            return store.data\r\n        } else if (store.data?.length === 0 && isFiltered) {\r\n            return []\r\n        } else {\r\n            return store.allData.slice(0, rowsPerPage)\r\n        }\r\n    }\r\n\r\n    const handleSort = (column, sortDirection) => {\r\n        setSort(sortDirection)\r\n        setSortColumn(column.sortField)\r\n        dispatch(\r\n            getDatass({\r\n                q: val,\r\n                page: currentPage,\r\n                sort: sortDirection,\r\n                status: statusValue,\r\n                perPage: rowsPerPage,\r\n                sortColumn: column.sortField\r\n            })\r\n        )\r\n    }\r\n\r\n    const onSubmit = async data => {\r\n\r\n        if (data['colorName']) {\r\n            const body = {\r\n                name: data.colorName,\r\n                code: data.colorCode,\r\n                deleted: false\r\n            }\r\n            dispatch(toggleLoading())\r\n            if (isEditMode) {\r\n                Object.assign(body, {\r\n                    id: selectedId\r\n                })\r\n\r\n                await ColorsService.updateColor(body, selectedId)\r\n                    .then(res => {\r\n                        if (res.success) {\r\n                            customToastMsg(\"Color update successfully!\", res.status)\r\n                            setShow(false)\r\n                            // setCurrentPage(0)\r\n                            getDatass({\r\n                                sort,\r\n                                q: val,\r\n                                sortColumn,\r\n                                page: currentPage - 1,\r\n                                perPage: rowsPerPage,\r\n                                status: statusValue\r\n                            })\r\n                        } else {\r\n                            customToastMsg(res.message, res.status)\r\n                        }\r\n                        dispatch(toggleLoading())\r\n                    })\r\n            } else {\r\n                await ColorsService.addColor(body)\r\n                    .then(res => {\r\n                        if (res.success) {\r\n                            customToastMsg(\"Color added successfully!\", res.status)\r\n                            setShow(false)\r\n                            setCurrentPage(0)\r\n                            getDatass({\r\n                                sort,\r\n                                q: val,\r\n                                sortColumn,\r\n                                page: 0,\r\n                                perPage: rowsPerPage,\r\n                                status: statusValue\r\n                            })\r\n                        } else {\r\n                            customToastMsg(res.message, res.status)\r\n                        }\r\n                        dispatch(toggleLoading())\r\n                    })\r\n            }\r\n\r\n        } else {\r\n            for (const key in data) {\r\n                if (data[key].length === 0) {\r\n                    setError(key, {\r\n                        type: 'required'\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line no-unused-vars\r\n    const onUpdateHandler = (data) => {\r\n        setSelectedId(data.id)\r\n        setValue(\"colorName\", data.name !== null ? data.name : \"\")\r\n        setValue(\"colorCode\", data.code)\r\n\r\n        setShow(true)\r\n        setIsEditMode(true)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'Color Name',\r\n            width: '50%',\r\n            center: true,\r\n            cell: row => row.name\r\n        },\r\n        {\r\n            width: '50%',\r\n            name: 'Color Code',\r\n            center: true,\r\n            cell: row => row.code\r\n        }\r\n        // {\r\n        //     width: '30%',\r\n        //     name: 'Action',\r\n        //     center: true,\r\n        //     // eslint-disable-next-line no-unused-vars\r\n        //     cell: row => (\r\n        //         <Button\r\n        //             color='success' outline\r\n        //             style={{height: 30, paddingTop: 0, paddingBottom: 0}}\r\n        //             onClick={() => onUpdateHandler(row)}\r\n        //         >\r\n        //             <Edit3 size={15} style={{marginRight: 5}}/>\r\n        //             Edit\r\n        //         </Button>\r\n        //     )\r\n        // }\r\n\r\n    ]\r\n\r\n    const clearTextFields = () => {\r\n        reset()\r\n        setIsEditMode(false)\r\n        setShow(true)\r\n    }\r\n\r\n    const customStyles = {\r\n        subHeader: {\r\n            style: {\r\n                display: 'none'\r\n            }\r\n        }\r\n    }\r\n\r\n    const onSearch = (value, type) => {\r\n        // let diameter = knittingDiameter\r\n        let searchName = name\r\n\r\n        switch (type) {\r\n            case 'NAME':\r\n                setName(value)\r\n                searchName = value\r\n                break\r\n            default:\r\n                break\r\n        }\r\n\r\n        prev = new Date().getTime()\r\n        setCurrentPage(0)\r\n\r\n        setTimeout(() => {\r\n            const now = new Date().getTime()\r\n            if (now - prev >= 1000) {\r\n                if (searchName.length === 0) {\r\n                    getDatass({\r\n                        sort,\r\n                        q: val,\r\n                        sortColumn,\r\n                        page: 0,\r\n                        perPage: 0,\r\n                        status: statusValue,\r\n                        // knittingDiameter: diameter,\r\n                        name: searchName\r\n                    })\r\n                    getAllColorsForCsv()\r\n                } else {\r\n                    searchColors({\r\n                        sort,\r\n                        q: val,\r\n                        sortColumn,\r\n                        page: 0,\r\n                        perPage: 0,\r\n                        status: statusValue,\r\n                        // knittingDiameter: diameter,\r\n                        name: searchName\r\n                    })\r\n                    searchColorsForCsv({\r\n                        name: searchName\r\n                    })\r\n                }\r\n            }\r\n        }, 1000)\r\n\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=''>\r\n                <CustomHeader\r\n                    value={val}\r\n                    statusValue={statusValue}\r\n                    rowsPerPage={rowsPerPage}\r\n                    handleFilter={handleFilter}\r\n                    handlePerPage={handlePerPage}\r\n                    handleStatusValue={handleStatusValue}\r\n                    onNameTextChange={e => onSearch(e.target.value, 'NAME')}\r\n                    name={name}\r\n                    onClearNameText={() => onSearch('', 'NAME')}\r\n                    csvList={csvData}\r\n                    csvAction={() => setCurrentDateTime(getCustomDateTimeStamp)}\r\n                    fileName={`ColorsReport_${currentDateTime}.csv`}\r\n                />\r\n                <Col\r\n                    lg='4'\r\n                    className='w-100 actions-right justify-content-end d-flex flex-lg-nowrap flex-wrap pe-1'\r\n                >\r\n                    <Button onClick={() => {\r\n                        clearTextFields()\r\n                    }} style={{width: 100}}>\r\n                        <Plus size={15} style={{marginRight: 5}}/>\r\n                        Add\r\n                    </Button>\r\n                </Col>\r\n                <Row className=\"mt-2\">\r\n                    <Col lg='3'/>\r\n                    <Col lg='6'>\r\n                        <Card>\r\n                            <div className='invoice-list-dataTable react-dataTable'>\r\n                                <DataTable\r\n                                    noHeader={true}\r\n                                    pagination\r\n                                    sortServer\r\n                                    paginationServer\r\n                                    subHeader={true}\r\n                                    columns={columns}\r\n                                    responsive={true}\r\n                                    onSort={handleSort}\r\n                                    data={dataToRender()}\r\n                                    sortIcon={<ChevronDown/>}\r\n                                    className=\"dataTables_wrapper\"\r\n                                    paginationDefaultPage={currentPage}\r\n                                    paginationComponent={CustomPagination}\r\n                                    customStyles={customStyles}\r\n                                    noDataComponent={emptyUI(isFetched)}\r\n                                />\r\n                            </div>\r\n                        </Card>\r\n\r\n                    </Col>\r\n\r\n                    <Col lg='3'/>\r\n                </Row>\r\n\r\n            </div>\r\n            <ColorsModal\r\n                show={show}\r\n                toggle={() => {\r\n                    setShow(!show)\r\n                    reset()\r\n                }}\r\n                onSubmit={handleSubmit(onSubmit)}\r\n                control={control}\r\n                errors={errors}\r\n                isEditMode={isEditMode}\r\n            />\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default ColorsList\r\n","import axios from 'axios'\r\nimport apiConfig from './apiConfig'\r\nimport * as constants from \"../const/constant\"\r\nimport * as commonFunc from \"../utility/Utils\"\r\n\r\nimport * as authService from \"./auth\"\r\nimport qs from \"qs\"\r\nimport {clearLocalStorage} from \"../utility/Utils\";\r\n\r\nlet body = {}\r\nlet headers\r\n\r\nconst renewTokenHandler = async (apiObject) => {\r\n    let result\r\n    // renew token - start\r\n    const obj = {\r\n        refresh_token: localStorage.getItem(constants.StorageStrings.REFRESH_TOKEN),\r\n        grant_type: 'refresh_token'\r\n    }\r\n    await authService.renewToken(qs.stringify(obj))\r\n        .then(async response => {\r\n            if (response.access_token) {\r\n                Cookies.set(constants.StorageStrings.ACCESS_TOKEN, response.access_token)\r\n                localStorage.setItem(constants.StorageStrings.ACCESS_TOKEN, response.access_token)\r\n                Cookies.set(constants.StorageStrings.REFRESH_TOKEN, response.refresh_token)\r\n                localStorage.setItem(constants.StorageStrings.REFRESH_TOKEN, response.refresh_token)\r\n                // eslint-disable-next-line no-use-before-define\r\n                result = await callApi(apiObject)\r\n            } else {\r\n                await commonFunc.removeCookiesValues()\r\n                await commonFunc.clearLocalStorage()\r\n                window.location.reload()\r\n            }\r\n        })\r\n    // renew token - end\r\n    return result\r\n}\r\n\r\n\r\nexport const callApi = async (apiObject) => {\r\n    const method = apiObject.method ? apiObject.method.toLowerCase() : 'get'\r\n\r\n    if (method === 'post' || method === 'put' || method === 'patch') {\r\n        body = apiObject.body ? apiObject.body : {}\r\n    }\r\n\r\n    headers = {\r\n        'Content-Type': apiObject.urlencoded ? 'application/x-www-form-urlencoded' : apiObject.multipart ? 'multipart/form-data' : 'application/json'\r\n    }\r\n    if (apiObject.authentication) {\r\n        const access_token = localStorage.getItem(constants.StorageStrings.ACCESS_TOKEN)\r\n        if (access_token) {\r\n            headers.Authorization = `Bearer ${access_token}`\r\n        }\r\n    }\r\n    if (apiObject.isBasicAuth) {\r\n        headers.Authorization = 'Basic';\r\n    }\r\n\r\n\r\n    const url = `${apiConfig.serverUrl}/${apiConfig.basePath}/${apiObject.endpoint}`\r\n    let result\r\n\r\n    await axios[method](url, method !== 'get' && method !== 'delete' ? body : {headers}, {headers})\r\n        .then(async response => {\r\n            const code = response.status\r\n\r\n            if (code === 204) {\r\n                result = {\r\n                    data: {},\r\n                    status: null,\r\n                    success: false,\r\n                    message: \"\"\r\n                };\r\n            } else {\r\n                result = {\r\n                    data: response.data === '' ? [] : response.data,\r\n                    status: response.data.message === 'Success' || response.data.message === 'OK' ? 1 : 0,\r\n                    success: response.data.message === 'Success' || response.data.message === 'OK' || response.data.message === undefined,\r\n                    message: response.data.message\r\n                };\r\n            }\r\n        })\r\n        .catch(async error => {\r\n            if (error !== undefined) {\r\n                if (error.response === undefined) {\r\n                    result = await {\r\n                        success: false,\r\n                        status: 0,\r\n                        message: \"Your connection was interrupted\",\r\n                        data: null\r\n                    }\r\n                } else if (error.response.status === 401) {\r\n\r\n                    // if (apiObject.state === \"renewToken\") {\r\n                    //     result = await {success: false, status: 2, message: error.response.data.message};\r\n                    // }\r\n                    // if (apiObject.state === \"login\") {\r\n                    //     result = await {success: false, status: 0, message: error.response.data.message};\r\n                    // }\r\n\r\n                    // result = await renewTokenHandler(apiObject)\r\n\r\n                    result = await {\r\n                        success: false,\r\n                        status: 0,\r\n                        message: error.response.data.message,\r\n                        data: null\r\n                    }\r\n\r\n                    await clearLocalStorage();\r\n                    window.location.reload()\r\n\r\n\r\n                } else if (error.response.status === 403) {\r\n                    result = await {\r\n                        success: false,\r\n                        status: 2,\r\n                        message: \"Access is denied.\",\r\n                        data: null\r\n                    }\r\n                } else if (error.response.status === 417 || error.response.status === 404) {\r\n                    result = await {\r\n                        success: false,\r\n                        status: 0,\r\n                        message: \"Oops! Something went wrong.\",\r\n                        data: null\r\n                    }\r\n                } else if (error.response.data !== undefined) {\r\n                    result = await {\r\n                        success: false,\r\n                        status: 0,\r\n                        message: error.response.data.message,\r\n                        data: null\r\n                    }\r\n                } else {\r\n                    result = await {\r\n                        success: false,\r\n                        status: 2,\r\n                        message: \"Sorry, something went wrong.\",\r\n                        data: null\r\n                    }\r\n                }\r\n            } else {\r\n                result = await {\r\n                    success: false,\r\n                    status: 2,\r\n                    message: \"Your connection was interrupted!\",\r\n                    data: null\r\n                }\r\n            }\r\n        })\r\n\r\n    return result\r\n}\r\n\r\nexport default {callApi, renewTokenHandler}\r\n","export const SERVER_URL = process.env.REACT_APP_SERVER_URL\r\n\r\nconst conf = {\r\n    serverUrl: SERVER_URL,\r\n    basePath: 'api/v1',\r\n    redirect: ``\r\n}\r\n\r\nexport default conf\r\n","import ApiService from './apiServices'\r\n\r\nexport async function renewToken(token) {\r\n    const apiObject = {}\r\n    apiObject.method = 'POST'\r\n    apiObject.authentication = false\r\n    apiObject.isBasicAuth = true\r\n    apiObject.urlencoded = true\r\n    apiObject.endpoint = 'authorize'\r\n    apiObject.body = token\r\n    apiObject.multipart = false\r\n    apiObject.state = \"renewToken\"\r\n    apiObject.grant_type = \"refresh_token\"\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function authUser(userCredentials) {\r\n    const apiObject = {}\r\n    apiObject.method = 'POST'\r\n    apiObject.authentication = false\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = 'login'\r\n    apiObject.body = userCredentials\r\n    apiObject.multipart = false\r\n    apiObject.state = \"login\"\r\n    apiObject.grant_type = \"password\"\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function getUserResources() {\r\n    const apiObject = {}\r\n    apiObject.method = 'GET'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = 'users'\r\n    apiObject.body = null\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function getUserDetails() {\r\n    const apiObject = {}\r\n    apiObject.method = 'GET'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = 'account'\r\n    apiObject.body = null\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function changeUserPassword(body) {\r\n    const apiObject = {}\r\n    apiObject.method = 'POST'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = 'account/change-password'\r\n    apiObject.body = body\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n","import React from \"react\"\r\nimport {Col, ModalBody, ModalHeader, Row, Modal} from \"reactstrap\"\r\n\r\nconst ModalComponent = (props) => {\r\n    return (\r\n        <Modal isOpen={props.show} toggle={props.toggle}\r\n               className={`modal-dialog-centered modal-${props.size ? props.size : 'xl'}`}>\r\n            <ModalHeader toggle={props.toggle}>{props.headTitle}</ModalHeader>\r\n            <ModalBody className='px-sm-5 mx-50 pb-5'>\r\n                {props.children}\r\n            </ModalBody>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ModalComponent\r\n","import ApiService from \"./apiServices\"\r\n\r\nexport async function getAllMachines(page) {\r\n    const apiObject = {}\r\n    apiObject.method = 'GET'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `machines?page=${page}&size=10`\r\n    apiObject.body = null\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function getMachines() {\r\n    const apiObject = {}\r\n    apiObject.method = 'GET'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `machines/list`\r\n    apiObject.body = null\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function getAllMachineDetails() {\r\n    const apiObject = {}\r\n    apiObject.method = 'GET'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `machines`\r\n    apiObject.body = null\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function saveNewMachine(body) {\r\n    const apiObject = {}\r\n    apiObject.method = 'POST'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `machines/add`\r\n    apiObject.body = body\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function updateMachine(body) {\r\n    const apiObject = {}\r\n    apiObject.method = 'PUT'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `machines/update`\r\n    apiObject.body = body\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function searchMachines(body, page) {\r\n    const apiObject = {}\r\n    apiObject.method = 'POST'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `machines/filter?page=${page}&size=10`\r\n    apiObject.body = body\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function searchMachinesForCsv(body) {\r\n    const apiObject = {}\r\n    apiObject.method = 'POST'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `machines/filter?page=0&size=0`\r\n    apiObject.body = body\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n","import ApiService from \"./apiServices\"\r\n\r\nexport async function getAllColors() {\r\n    const apiObject = {}\r\n    apiObject.method = 'GET'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `colors/all`\r\n    apiObject.body = null\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function getColorsById(id) {\r\n    const apiObject = {}\r\n    apiObject.method = 'GET'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `style-colors/colors/${id}`\r\n    apiObject.body = null\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function getAllColorsWithPaginate(page) {\r\n    const apiObject = {}\r\n    apiObject.method = 'GET'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `colors?page=${page}&size=10&sort=name,asc`\r\n    apiObject.body = null\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function addColor(body) {\r\n    const apiObject = {}\r\n    apiObject.method = 'POST'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `colors`\r\n    apiObject.body = body\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function updateColor(body, id) {\r\n    const apiObject = {}\r\n    apiObject.method = 'PUT'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `colors/${id}`\r\n    apiObject.body = body\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function searchColors(body, page) {\r\n    const apiObject = {}\r\n    apiObject.method = 'POST'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `colors/filter?page=${page}&size=10`\r\n    apiObject.body = body\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function searchColorsForCsv(body) {\r\n    const apiObject = {}\r\n    apiObject.method = 'POST'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `colors/filter?page=0&size=0`\r\n    apiObject.body = body\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n"],"sourceRoot":""}