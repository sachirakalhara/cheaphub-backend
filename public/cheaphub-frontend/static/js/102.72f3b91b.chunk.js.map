{"version":3,"sources":["services/material-requirement-resources.js","views/materials/index.js","services/apiServices.js","services/apiConfig.js","services/auth.js"],"names":["getAllMachines","page","from","to","a","apiObject","method","authentication","isBasicAuth","urlencoded","endpoint","body","multipart","ApiService","callApi","getAllMaterialsForCsv","moment","require","CustomHeader","picker","onChange","onClose","csvList","csvAction","fileName","className","style","whiteSpace","lg","for","id","width","options","mode","showMonths","defaultDate","Date","setMonth","getMonth","length","headers","label","key","target","data","asyncOnClick","onClick","filename","columns","name","center","cell","row","supplierName","articleName","twist","roundNumber","Number","articleWeightWithFallout","MaterialsRequirements","dispatch","useDispatch","useState","val","currentPage","statusValue","rowsPerPage","setPicker","currentDateTime","setCurrentDateTime","allData","params","total","store","setStore","csvData","setCsvData","isFetched","setIsFetched","getData","dateRange","toggleLoading","MaterialResources","format","then","res","success","content","totalPages","customToastMsg","title","status","getCsvData","list","map","item","push","supplier","article","weight","toString","console","log","useEffect","today","monthLater","handlePagination","selected","date","selectedDates","dateStr","instance","setDate","getCustomDateTimeStamp","noHeader","pagination","sortServer","paginationServer","subHeader","responsive","onSort","filters","q","isFiltered","Object","keys","some","k","slice","dataToRender","sortIcon","paginationDefaultPage","paginationComponent","nextLabel","breakLabel","previousLabel","pageCount","activeClassName","breakClassName","pageClassName","breakLinkClassName","nextLinkClassName","pageLinkClassName","nextClassName","previousLinkClassName","previousClassName","onPageChange","forcePage","containerClassName","customStyles","display","noDataComponent","emptyUI","conf","serverUrl","process","basePath","redirect","renewTokenHandler","obj","refresh_token","localStorage","getItem","constants","REFRESH_TOKEN","grant_type","authService","qs","stringify","response","access_token","Cookies","set","ACCESS_TOKEN","setItem","result","commonFunc","window","location","reload","toLowerCase","Authorization","url","apiConfig","axios","code","message","undefined","catch","error","clearLocalStorage","renewToken","token","state","authUser","userCredentials","changeUserPassword"],"mappings":"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","file":"static/js/102.72f3b91b.chunk.js","sourcesContent":["import ApiService from \"./apiServices\"\r\n\r\nexport async function getAllMachines(page, from, to) {\r\n    const apiObject = {}\r\n    apiObject.method = 'GET'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `estimations/yarn-requirements/within/${from}/${to}?page=${page}&size=10`\r\n    apiObject.body = null\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function getAllMaterialsForCsv(from, to) {\r\n    const apiObject = {}\r\n    apiObject.method = 'GET'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = `estimations/yarn-requirements/within/${from}/${to}`\r\n    apiObject.body = null\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n","import React, {Fragment, useEffect, useState} from \"react\"\r\nimport {Button, Card, Col, Input, Label, Row} from \"reactstrap\"\r\nimport Flatpickr from \"react-flatpickr\"\r\nimport DataTable from \"react-data-table-component\"\r\nimport {ChevronDown, Edit3} from \"react-feather\"\r\nimport ReactPaginate from \"react-paginate\"\r\nimport * as MaterialResources from '../../services/material-requirement-resources'\r\n// eslint-disable-next-line no-unused-vars\r\nimport {customToastMsg, emptyUI, getCustomDateTimeStamp, roundNumber} from \"../../utility/Utils\"\r\nimport {useDispatch} from \"react-redux\"\r\nimport {toggleLoading} from '@store/loading'\r\nimport {CSVLink} from \"react-csv\"\r\n\r\nconst moment = require('moment')\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nconst CustomHeader = ({picker, onChange, onClose, csvList, csvAction, fileName}) => {\r\n    return (\r\n        <Card>\r\n            <div className='invoice-list-table-header w-100 py-2 px-1 m-0' style={{whiteSpace: 'nowrap'}}>\r\n                <h3 className='text-primary invoice-logo mb-2'>Material Requirements Planing</h3>\r\n                <Row>\r\n                    <Col lg='6'\r\n                         className='d-flex align-items-center px-0 px-lg-1 justify-content-between w-100 align-items-center'>\r\n                        <div className='d-flex align-items-center w-100'>\r\n                            <Label className='form-label' for='default-picker'>\r\n                                Requirements for upcoming due orders\r\n                            </Label>\r\n                            <Flatpickr\r\n                                // value={picker}\r\n                                id='range-picker'\r\n                                className='form-control ms-1'\r\n                                onChange={onChange}\r\n                                style={{width: 210}}\r\n                                options={{\r\n                                    mode: 'range',\r\n                                    showMonths: 2,\r\n                                    defaultDate: [new Date(), new Date(new Date().setMonth(new Date().getMonth() + 1))]\r\n                                }}\r\n                                onClose={onClose}\r\n                            />\r\n                        </div>\r\n                        {csvList.length !== 0 && (\r\n                            <CSVLink\r\n                                headers={[\r\n                                    {label: \"Supplier\", key: \"supplier\"},\r\n                                    {label: \"Article\", key: \"article\"},\r\n                                    {label: \"Twist\", key: \"twist\"},\r\n                                    {label: \"Weight (kg)\", key: \"weight\"}\r\n                                ]}\r\n                                target=\"_blank\"\r\n                                data={csvList}\r\n                                className=\"btn btn-primary\"\r\n                                asyncOnClick={true}\r\n                                onClick={csvAction}\r\n                                filename={fileName}\r\n                            >\r\n                                Export CSV\r\n                            </CSVLink>\r\n                        )}\r\n\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        </Card>\r\n    )\r\n}\r\n\r\nconst columns = [\r\n    {\r\n        name: 'Supplier',\r\n        width: '30%',\r\n        center: true,\r\n        cell: row => row.supplierName\r\n    },\r\n    {\r\n        name: 'Article',\r\n        width: '30%',\r\n        center: true,\r\n        cell: row => row.articleName\r\n    },\r\n    {\r\n        width: '20%',\r\n        name: 'Twist',\r\n        center: true,\r\n        cell: row => row.twist\r\n    },\r\n    {\r\n        width: '20%',\r\n        name: <span>Weight <span className=\"text-lowercase\">(Kg)</span></span>,\r\n        center: true,\r\n        cell: row => roundNumber(Number(row.articleWeightWithFallout) / 1000)\r\n    }\r\n]\r\n\r\nconst MaterialsRequirements = () => {\r\n    const dispatch = useDispatch()\r\n    // eslint-disable-next-line no-unused-vars\r\n    const [val, setVal] = useState('')\r\n    // eslint-disable-next-line no-unused-vars\r\n    const [currentPage, setCurrentPage] = useState(0)\r\n    // eslint-disable-next-line no-unused-vars\r\n    const [statusValue, setStatusValue] = useState('')\r\n    // eslint-disable-next-line no-unused-vars\r\n    const [rowsPerPage, setRowsPerPage] = useState(10)\r\n    const [picker, setPicker] = useState([])\r\n    const [currentDateTime, setCurrentDateTime] = useState('')\r\n\r\n    const [store, setStore] = useState({\r\n        allData: [],\r\n        data: [],\r\n        params: {\r\n            page: 0,\r\n            currentPage: 0\r\n        },\r\n        total: 0\r\n    })\r\n    const [csvData, setCsvData] = useState([])\r\n    const [isFetched, setIsFetched] = useState(false)\r\n\r\n    const getData = async (dateRange, params) => {\r\n        dispatch(toggleLoading())\r\n        await MaterialResources.getAllMachines(params.page, moment(dateRange[0]).format('YYYY-MM-DD'), moment(dateRange[1]).format('YYYY-MM-DD'))\r\n            .then(res => {\r\n                if (res.success) {\r\n                    setStore({allData: res.data.content, data: res.data.content, params, total: res.data.totalPages})\r\n                } else {\r\n                    customToastMsg(res.data.title, res.status)\r\n                }\r\n                dispatch(toggleLoading())\r\n                setIsFetched(true)\r\n            })\r\n    }\r\n\r\n    const getCsvData = async (dateRange) => {\r\n        await MaterialResources.getAllMaterialsForCsv(moment(dateRange[0]).format('YYYY-MM-DD'), moment(dateRange[1]).format('YYYY-MM-DD'))\r\n            .then(res => {\r\n                if (res.success) {\r\n                    const list = []\r\n                    res.data.content.map(item => {\r\n                        list.push({\r\n                            supplier: item.supplierName,\r\n                            article: item.articleName,\r\n                            twist: item.twist,\r\n                            weight: roundNumber(Number(item.articleWeightWithFallout) / 1000).toString()\r\n                        })\r\n                    })\r\n                    console.log(list)\r\n                    setCsvData(list)\r\n                }\r\n            })\r\n    }\r\n\r\n    useEffect(async () => {\r\n        const today = new Date()\r\n        const monthLater = new Date(today.setMonth(today.getMonth() + 1))\r\n        const dateRange = [new Date(), monthLater]\r\n\r\n        setPicker(dateRange)\r\n\r\n        await getData(dateRange, {page: 0, currentPage: 0})\r\n        await getCsvData(dateRange)\r\n    }, [])\r\n\r\n    const dataToRender = () => {\r\n        const filters = {\r\n            q: val,\r\n            status: statusValue\r\n        }\r\n\r\n        const isFiltered = Object.keys(filters).some(function (k) {\r\n            return filters[k].length > 0\r\n        })\r\n\r\n        if (store.data?.length > 0) {\r\n            return store.data\r\n        } else if (store.data?.length === 0 && isFiltered) {\r\n            return []\r\n        } else {\r\n            return store.allData.slice(0, rowsPerPage)\r\n        }\r\n    }\r\n\r\n    const customStyles = {\r\n        subHeader: {\r\n            style: {\r\n                display: 'none'\r\n            }\r\n        }\r\n    }\r\n\r\n    const handlePagination = async (page) => {\r\n        await getData(picker, {page: page.selected, currentPage: page.selected + 1})\r\n    }\r\n\r\n    const CustomPagination = () => {\r\n\r\n        return (\r\n            <ReactPaginate\r\n                nextLabel=''\r\n                breakLabel='...'\r\n                previousLabel=''\r\n                pageCount={store.total || 1}\r\n                activeClassName='active'\r\n                breakClassName='page-item'\r\n                pageClassName={'page-item'}\r\n                breakLinkClassName='page-link'\r\n                nextLinkClassName={'page-link'}\r\n                pageLinkClassName={'page-link'}\r\n                nextClassName={'page-item next'}\r\n                previousLinkClassName={'page-link'}\r\n                previousClassName={'page-item prev'}\r\n                onPageChange={page => handlePagination(page)}\r\n                forcePage={store.params.currentPage !== 0 ? store.params.currentPage - 1 : 0}\r\n                containerClassName={'pagination react-paginate justify-content-end p-1'}\r\n            />\r\n        )\r\n    }\r\n    const handleSort = () => {\r\n\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <div>\r\n                <CustomHeader\r\n                    picker={picker}\r\n                    onChange={async (date) => {\r\n                        if (date.length === 2) {\r\n                            setPicker(date)\r\n                            await getData(date, {page: 0, currentPage: 0})\r\n                            await getCsvData(date)\r\n                        }\r\n                    }}\r\n                    onClose={(selectedDates, dateStr, instance) => {\r\n                        if (selectedDates.length === 1) {\r\n                            instance.setDate([picker[0], picker[1]], true)\r\n                        }\r\n                    }}\r\n                    csvList={csvData}\r\n                    csvAction={() => setCurrentDateTime(getCustomDateTimeStamp)}\r\n                    fileName={`MaterialRequirementReport_${currentDateTime}.csv`}\r\n                />\r\n                <Card className=\"mt-2\">\r\n                    <h4 className='text-primary invoice-logo m-2'>Yarn Requirement</h4>\r\n                    <div className='invoice-list-dataTable react-dataTable'>\r\n                        <DataTable\r\n                            noHeader={false}\r\n                            pagination\r\n                            sortServer\r\n                            paginationServer\r\n                            subHeader={true}\r\n                            columns={columns}\r\n                            responsive={true}\r\n                            onSort={handleSort}\r\n                            data={dataToRender()}\r\n                            sortIcon={<ChevronDown/>}\r\n                            className=\"dataTables_wrapper\"\r\n                            paginationDefaultPage={currentPage}\r\n                            paginationComponent={CustomPagination}\r\n                            customStyles={customStyles}\r\n                            noDataComponent={emptyUI(isFetched)}\r\n                        />\r\n                    </div>\r\n                </Card>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default MaterialsRequirements\r\n","import axios from 'axios'\r\nimport apiConfig from './apiConfig'\r\nimport * as constants from \"../const/constant\"\r\nimport * as commonFunc from \"../utility/Utils\"\r\n\r\nimport * as authService from \"./auth\"\r\nimport qs from \"qs\"\r\nimport {clearLocalStorage} from \"../utility/Utils\";\r\n\r\nlet body = {}\r\nlet headers\r\n\r\nconst renewTokenHandler = async (apiObject) => {\r\n    let result\r\n    // renew token - start\r\n    const obj = {\r\n        refresh_token: localStorage.getItem(constants.StorageStrings.REFRESH_TOKEN),\r\n        grant_type: 'refresh_token'\r\n    }\r\n    await authService.renewToken(qs.stringify(obj))\r\n        .then(async response => {\r\n            if (response.access_token) {\r\n                Cookies.set(constants.StorageStrings.ACCESS_TOKEN, response.access_token)\r\n                localStorage.setItem(constants.StorageStrings.ACCESS_TOKEN, response.access_token)\r\n                Cookies.set(constants.StorageStrings.REFRESH_TOKEN, response.refresh_token)\r\n                localStorage.setItem(constants.StorageStrings.REFRESH_TOKEN, response.refresh_token)\r\n                // eslint-disable-next-line no-use-before-define\r\n                result = await callApi(apiObject)\r\n            } else {\r\n                await commonFunc.removeCookiesValues()\r\n                await commonFunc.clearLocalStorage()\r\n                window.location.reload()\r\n            }\r\n        })\r\n    // renew token - end\r\n    return result\r\n}\r\n\r\n\r\nexport const callApi = async (apiObject) => {\r\n    const method = apiObject.method ? apiObject.method.toLowerCase() : 'get'\r\n\r\n    if (method === 'post' || method === 'put' || method === 'patch') {\r\n        body = apiObject.body ? apiObject.body : {}\r\n    }\r\n\r\n    headers = {\r\n        'Content-Type': apiObject.urlencoded ? 'application/x-www-form-urlencoded' : apiObject.multipart ? 'multipart/form-data' : 'application/json'\r\n    }\r\n    if (apiObject.authentication) {\r\n        const access_token = localStorage.getItem(constants.StorageStrings.ACCESS_TOKEN)\r\n        if (access_token) {\r\n            headers.Authorization = `Bearer ${access_token}`\r\n        }\r\n    }\r\n    if (apiObject.isBasicAuth) {\r\n        headers.Authorization = 'Basic';\r\n    }\r\n\r\n\r\n    const url = `${apiConfig.serverUrl}/${apiConfig.basePath}/${apiObject.endpoint}`\r\n    let result\r\n\r\n    await axios[method](url, method !== 'get' && method !== 'delete' ? body : {headers}, {headers})\r\n        .then(async response => {\r\n            const code = response.status\r\n\r\n            if (code === 204) {\r\n                result = {\r\n                    data: {},\r\n                    status: null,\r\n                    success: false,\r\n                    message: \"\"\r\n                };\r\n            } else {\r\n                result = {\r\n                    data: response.data === '' ? [] : response.data,\r\n                    status: response.data.message === 'Success' || response.data.message === 'OK' ? 1 : 0,\r\n                    success: response.data.message === 'Success' || response.data.message === 'OK' || response.data.message === undefined,\r\n                    message: response.data.message\r\n                };\r\n            }\r\n        })\r\n        .catch(async error => {\r\n            if (error !== undefined) {\r\n                if (error.response === undefined) {\r\n                    result = await {\r\n                        success: false,\r\n                        status: 0,\r\n                        message: \"Your connection was interrupted\",\r\n                        data: null\r\n                    }\r\n                } else if (error.response.status === 401) {\r\n\r\n                    // if (apiObject.state === \"renewToken\") {\r\n                    //     result = await {success: false, status: 2, message: error.response.data.message};\r\n                    // }\r\n                    // if (apiObject.state === \"login\") {\r\n                    //     result = await {success: false, status: 0, message: error.response.data.message};\r\n                    // }\r\n\r\n                    // result = await renewTokenHandler(apiObject)\r\n\r\n                    result = await {\r\n                        success: false,\r\n                        status: 0,\r\n                        message: error.response.data.message,\r\n                        data: null\r\n                    }\r\n\r\n                    await clearLocalStorage();\r\n                    window.location.reload()\r\n\r\n\r\n                } else if (error.response.status === 403) {\r\n                    result = await {\r\n                        success: false,\r\n                        status: 2,\r\n                        message: \"Access is denied.\",\r\n                        data: null\r\n                    }\r\n                } else if (error.response.status === 417 || error.response.status === 404) {\r\n                    result = await {\r\n                        success: false,\r\n                        status: 0,\r\n                        message: \"Oops! Something went wrong.\",\r\n                        data: null\r\n                    }\r\n                } else if (error.response.data !== undefined) {\r\n                    result = await {\r\n                        success: false,\r\n                        status: 0,\r\n                        message: error.response.data.message,\r\n                        data: null\r\n                    }\r\n                } else {\r\n                    result = await {\r\n                        success: false,\r\n                        status: 2,\r\n                        message: \"Sorry, something went wrong.\",\r\n                        data: null\r\n                    }\r\n                }\r\n            } else {\r\n                result = await {\r\n                    success: false,\r\n                    status: 2,\r\n                    message: \"Your connection was interrupted!\",\r\n                    data: null\r\n                }\r\n            }\r\n        })\r\n\r\n    return result\r\n}\r\n\r\nexport default {callApi, renewTokenHandler}\r\n","export const SERVER_URL = process.env.REACT_APP_SERVER_URL\r\n\r\nconst conf = {\r\n    serverUrl: SERVER_URL,\r\n    basePath: 'api/v1',\r\n    redirect: ``\r\n}\r\n\r\nexport default conf\r\n","import ApiService from './apiServices'\r\n\r\nexport async function renewToken(token) {\r\n    const apiObject = {}\r\n    apiObject.method = 'POST'\r\n    apiObject.authentication = false\r\n    apiObject.isBasicAuth = true\r\n    apiObject.urlencoded = true\r\n    apiObject.endpoint = 'authorize'\r\n    apiObject.body = token\r\n    apiObject.multipart = false\r\n    apiObject.state = \"renewToken\"\r\n    apiObject.grant_type = \"refresh_token\"\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function authUser(userCredentials) {\r\n    const apiObject = {}\r\n    apiObject.method = 'POST'\r\n    apiObject.authentication = false\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = 'login'\r\n    apiObject.body = userCredentials\r\n    apiObject.multipart = false\r\n    apiObject.state = \"login\"\r\n    apiObject.grant_type = \"password\"\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function getUserResources() {\r\n    const apiObject = {}\r\n    apiObject.method = 'GET'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = 'users'\r\n    apiObject.body = null\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function getUserDetails() {\r\n    const apiObject = {}\r\n    apiObject.method = 'GET'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = 'account'\r\n    apiObject.body = null\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n\r\nexport async function changeUserPassword(body) {\r\n    const apiObject = {}\r\n    apiObject.method = 'POST'\r\n    apiObject.authentication = true\r\n    apiObject.isBasicAuth = false\r\n    apiObject.urlencoded = false\r\n    apiObject.endpoint = 'account/change-password'\r\n    apiObject.body = body\r\n    apiObject.multipart = false\r\n\r\n    return await ApiService.callApi(apiObject)\r\n}\r\n"],"sourceRoot":""}